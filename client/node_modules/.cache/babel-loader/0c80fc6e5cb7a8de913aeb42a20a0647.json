{"ast":null,"code":"/**\n * Module dependencies.\n * @ignore\n */\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n\n}\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\n\n\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer == 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer != 'undefined') {\n        this.buffer = new Buffer(buffer);\n      } else if (typeof Uint8Array != 'undefined' || Object.prototype.toString.call(buffer) == '[object Array]') {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error(\"only String, Buffer, Uint8Array or Array accepted\");\n      }\n    } else {\n      this.buffer = buffer;\n    }\n\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer != 'undefined') {\n      this.buffer = new Buffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array != 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    } // Set position to start of buffer\n\n\n    this.position = 0;\n  }\n}\n\n;\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\n\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error(\"only accepts single character String, Uint8Array or Array\");\n  if (typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error(\"only accepts number in a valid unsigned byte range 0-255\"); // Decode the byte value once\n\n  var decoded_byte = null;\n\n  if (typeof byte_value == 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length); // Combine the two buffers together\n\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      var buffer = null; // Create a new buffer (typed or normal array)\n\n      if (Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      } // We need to copy all the content to the new array\n\n\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      } // Reassign the buffer\n\n\n      this.buffer = buffer; // Write the byte\n\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\n\n\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset == 'number' ? offset : this.position; // If the buffer is to small let's extend the buffer\n\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null; // If we are in node.js\n\n    if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = new Buffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length)); // Copy the content\n\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    } // Assign the new buffer\n\n\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length\n  } else if (typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length;\n  } else if (Object.prototype.toString.call(string) == '[object Uint8Array]' || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {\n    for (var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string == 'string') {\n    for (var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\n\n\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position; // Let's return the data based on the type we have\n\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  } // Return the buffer\n\n\n  return buffer;\n};\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\n\n\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw; // Optimize to serialize for the situation where the data == size of buffer\n\n  if (asRaw && typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length == this.position) return this.buffer; // If it's a node.js buffer object\n\n  if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position); // Copy content\n\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        } // Return the buffer\n\n\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\n\n\nBinary.prototype.length = function length() {\n  return this.position;\n};\n/**\n * @ignore\n */\n\n\nBinary.prototype.toJSON = function () {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n/**\n * @ignore\n */\n\n\nBinary.prototype.toString = function (format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n/**\n * Binary default subtype\n * @ignore\n */\n\n\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * @ignore\n */\n\nvar writeStringToArray = function (data) {\n  // Create a buffer\n  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length); // Write the content to the buffer\n\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  } // Write the string to the buffer\n\n\n  return buffer;\n};\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\n\n\nvar convertArraytoUtf8BinaryString = function (byteArray, startIndex, endIndex) {\n  var result = \"\";\n\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\n\nBinary.SUBTYPE_USER_DEFINED = 128;\n/**\n * Expose.\n */\n\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/binary.js"],"names":["global","Buffer","require","Binary","buffer","subType","_bsontype","Number","sub_type","position","BSON_BINARY_SUBTYPE_DEFAULT","Uint8Array","Object","prototype","toString","call","writeStringToArray","Error","length","BUFFER_SIZE","ArrayBuffer","Array","put","byte_value","decoded_byte","charCodeAt","isBuffer","copy","i","write","string","offset","read","slice","value","asRaw","newBuffer","convertArraytoUtf8BinaryString","toJSON","format","data","byteArray","startIndex","endIndex","result","String","fromCharCode","SUBTYPE_DEFAULT","SUBTYPE_FUNCTION","SUBTYPE_BYTE_ARRAY","SUBTYPE_UUID_OLD","SUBTYPE_UUID","SUBTYPE_MD5","SUBTYPE_USER_DEFINED","module","exports"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n * @ignore\n */\n\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif(typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\nfunction Binary(buffer, subType) {\n  if(!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  this._bsontype = 'Binary';\n\n  if(buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if(buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if(typeof buffer == 'string') {\n      // Different ways of writing the length of the string for the different types\n      if(typeof Buffer != 'undefined') {\n        this.buffer = new Buffer(buffer);\n      } else if(typeof Uint8Array != 'undefined' || (Object.prototype.toString.call(buffer) == '[object Array]')) {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error(\"only String, Buffer, Uint8Array or Array accepted\");\n      }\n    } else {\n      this.buffer = buffer;\n    }\n    this.position = buffer.length;\n  } else {\n    if(typeof Buffer != 'undefined') {\n      this.buffer =  new Buffer(Binary.BUFFER_SIZE);\n    } else if(typeof Uint8Array != 'undefined'){\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    }\n    // Set position to start of buffer\n    this.position = 0;\n  }\n};\n\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if(byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error(\"only accepts single character String, Uint8Array or Array\");\n  if(typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error(\"only accepts number in a valid unsigned byte range 0-255\");\n\n  // Decode the byte value once\n  var decoded_byte = null;\n  if(typeof byte_value == 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if(byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if(this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);\n      // Combine the two buffers together\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      var buffer = null;\n      // Create a new buffer (typed or normal array)\n      if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      }\n\n      // We need to copy all the content to the new array\n      for(var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      }\n\n      // Reassign the buffer\n      this.buffer = buffer;\n      // Write the byte\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset == 'number' ? offset : this.position;\n\n  // If the buffer is to small let's extend the buffer\n  if(this.buffer.length < offset + string.length) {\n    var buffer = null;\n    // If we are in node.js\n    if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = new Buffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if(Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length))\n      // Copy the content\n      for(var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    }\n\n    // Assign the new buffer\n    this.buffer = buffer;\n  }\n\n  if(typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;\n    // offset = string.length\n  } else if(typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = (offset + string.length) > this.position ? (offset + string.length) : this.position;\n    // offset = string.length;\n  } else if(Object.prototype.toString.call(string) == '[object Uint8Array]'\n    || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {\n    for(var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if(typeof string == 'string') {\n    for(var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0\n    ? length\n    : this.position;\n\n  // Let's return the data based on the type we have\n  if(this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);\n    for(var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  }\n  // Return the buffer\n  return buffer;\n};\n\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw;\n\n  // Optimize to serialize for the situation where the data == size of buffer\n  if(asRaw && typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length == this.position)\n    return this.buffer;\n\n  // If it's a node.js buffer object\n  if(typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if(asRaw) {\n      // we support the slice command use it\n      if(this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position);\n        // Copy content\n        for(var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        }\n        // Return the buffer\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\nBinary.prototype.length = function length() {\n  return this.position;\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toJSON = function() {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n}\n\n/**\n * @ignore\n */\nBinary.prototype.toString = function(format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n}\n\n/**\n * Binary default subtype\n * @ignore\n */\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/**\n * @ignore\n */\nvar writeStringToArray = function(data) {\n  // Create a buffer\n  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length);\n  // Write the content to the buffer\n  for(var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n}\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nvar convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {\n  var result = \"\";\n  for(var i = startIndex; i < endIndex; i++) {\n   result = result + String.fromCharCode(byteArray[i]);\n  }\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Expose.\n */\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;\n"]},"metadata":{},"sourceType":"script"}