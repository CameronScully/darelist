{"ast":null,"code":"function translate(promptText) {\n  var dares = [];\n  var penalties = []; //console.log(promptText);\n  //load dares\n\n  while (true) {\n    //find start of dare\n    var dareTextStart = promptText.indexOf(\"The Dare:\");\n\n    if (dareTextStart == -1) {\n      break;\n    } //find end of dare\n\n\n    var dareTextEnd = promptText.indexOf(\"Point Value:\"); //extract dare\n\n    var extractedText = promptText.slice(dareTextStart + 10, dareTextEnd); //extract point Value\n\n    var extractedPointValue = promptText.slice(dareTextEnd + 13, dareTextEnd + 14); //extract challengeable\n\n    var extractedChallengeable = promptText.slice(dareTextEnd + 30, dareTextEnd + 32);\n\n    if (extractedChallengeable == \"Ye\") {\n      extractedChallengeable = promptText.slice(dareTextEnd + 30, dareTextEnd + 33); //cut string\n\n      promptText = promptText.slice(dareTextEnd + 33);\n    } else {\n      //cut string\n      promptText = promptText.slice(dareTextEnd + 32);\n    } //new object\n\n\n    dares.push({\n      text: extractedText,\n      pointValue: 1,\n      challengable: false,\n      nsfw: false\n    });\n  } //load penalties\n\n\n  while (true) {\n    //find start of penalty\n    var penaltyTextStart = promptText.indexOf(\"The Penalty:\");\n\n    if (penaltyTextStart == -1) {\n      break;\n    }\n\n    promptText = promptText.slice(penaltyTextStart + 13); //find end of penalty\n\n    var penaltyTextEnd = promptText.indexOf(\"The Penalty:\"); //extract penalty\n\n    var extractedText = promptText.slice(0, penaltyTextEnd);\n    console.log(extractedText);\n    promptText = promptText.slice(penaltyTextEnd); //new object\n\n    penalties.push({\n      text: extractedText\n    });\n    break;\n  }\n\n  var translation = {\n    dares: dares,\n    penalties: penalties\n  };\n  return translation;\n}\n\nexport default translate;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/src/functions/textTranslator.js"],"names":["translate","promptText","dares","penalties","dareTextStart","indexOf","dareTextEnd","extractedText","slice","extractedPointValue","extractedChallengeable","push","text","pointValue","challengable","nsfw","penaltyTextStart","penaltyTextEnd","console","log","translation"],"mappings":"AACA,SAASA,SAAT,CAAmBC,UAAnB,EAA8B;AAC5B,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,EAAhB,CAF4B,CAI5B;AAEA;;AACA,SAAM,IAAN,EAAW;AACT;AACA,QAAIC,aAAa,GAAGH,UAAU,CAACI,OAAX,CAAmB,WAAnB,CAApB;;AAEA,QAAGD,aAAa,IAAI,CAAC,CAArB,EAAuB;AACrB;AACD,KANQ,CAQT;;;AACA,QAAIE,WAAW,GAAGL,UAAU,CAACI,OAAX,CAAmB,cAAnB,CAAlB,CATS,CAWT;;AACA,QAAIE,aAAa,GAAGN,UAAU,CAACO,KAAX,CAAiBJ,aAAa,GAAC,EAA/B,EAAmCE,WAAnC,CAApB,CAZS,CAcT;;AACA,QAAIG,mBAAmB,GAAGR,UAAU,CAACO,KAAX,CAAiBF,WAAW,GAAC,EAA7B,EAAiCA,WAAW,GAAC,EAA7C,CAA1B,CAfS,CAiBT;;AACA,QAAII,sBAAsB,GAAGT,UAAU,CAACO,KAAX,CAAiBF,WAAW,GAAC,EAA7B,EAAiCA,WAAW,GAAC,EAA7C,CAA7B;;AAEA,QAAGI,sBAAsB,IAAI,IAA7B,EAAkC;AAChCA,MAAAA,sBAAsB,GAAGT,UAAU,CAACO,KAAX,CAAiBF,WAAW,GAAC,EAA7B,EAAiCA,WAAW,GAAC,EAA7C,CAAzB,CADgC,CAEhC;;AACAL,MAAAA,UAAU,GAAGA,UAAU,CAACO,KAAX,CAAiBF,WAAW,GAAC,EAA7B,CAAb;AACD,KAJD,MAIO;AACL;AACAL,MAAAA,UAAU,GAAGA,UAAU,CAACO,KAAX,CAAiBF,WAAW,GAAC,EAA7B,CAAb;AACD,KA3BQ,CA6BT;;;AACAJ,IAAAA,KAAK,CAACS,IAAN,CACE;AACEC,MAAAA,IAAI,EAAEL,aADR;AAEEM,MAAAA,UAAU,EAAE,CAFd;AAGEC,MAAAA,YAAY,EAAE,KAHhB;AAIEC,MAAAA,IAAI,EAAE;AAJR,KADF;AAQD,GA7C2B,CA+C5B;;;AACA,SAAM,IAAN,EAAW;AACT;AACA,QAAIC,gBAAgB,GAAGf,UAAU,CAACI,OAAX,CAAmB,cAAnB,CAAvB;;AAEA,QAAGW,gBAAgB,IAAI,CAAC,CAAxB,EAA0B;AACxB;AACD;;AAEDf,IAAAA,UAAU,GAAGA,UAAU,CAACO,KAAX,CAAiBQ,gBAAgB,GAAC,EAAlC,CAAb,CARS,CAUT;;AACA,QAAIC,cAAc,GAAGhB,UAAU,CAACI,OAAX,CAAmB,cAAnB,CAArB,CAXS,CAaT;;AACA,QAAIE,aAAa,GAAGN,UAAU,CAACO,KAAX,CAAiB,CAAjB,EAAoBS,cAApB,CAApB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAEAN,IAAAA,UAAU,GAAGA,UAAU,CAACO,KAAX,CAAiBS,cAAjB,CAAb,CAlBS,CAoBT;;AACAd,IAAAA,SAAS,CAACQ,IAAV,CACE;AACEC,MAAAA,IAAI,EAAEL;AADR,KADF;AAKD;AACA;;AAED,MAAIa,WAAW,GAAG;AAChBlB,IAAAA,KAAK,EAAEA,KADS;AAEhBC,IAAAA,SAAS,EAAEA;AAFK,GAAlB;AAKA,SAAOiB,WAAP;AAED;;AAED,eAAepB,SAAf","sourcesContent":["\r\nfunction translate(promptText){\r\n  var dares = [];\r\n  var penalties = [];\r\n\r\n  //console.log(promptText);\r\n\r\n  //load dares\r\n  while(true){\r\n    //find start of dare\r\n    var dareTextStart = promptText.indexOf(\"The Dare:\");\r\n\r\n    if(dareTextStart == -1){\r\n      break;\r\n    }\r\n\r\n    //find end of dare\r\n    var dareTextEnd = promptText.indexOf(\"Point Value:\");\r\n\r\n    //extract dare\r\n    var extractedText = promptText.slice(dareTextStart+10, dareTextEnd);\r\n\r\n    //extract point Value\r\n    var extractedPointValue = promptText.slice(dareTextEnd+13, dareTextEnd+14);\r\n\r\n    //extract challengeable\r\n    var extractedChallengeable = promptText.slice(dareTextEnd+30, dareTextEnd+32);\r\n\r\n    if(extractedChallengeable == \"Ye\"){\r\n      extractedChallengeable = promptText.slice(dareTextEnd+30, dareTextEnd+33);\r\n      //cut string\r\n      promptText = promptText.slice(dareTextEnd+33);\r\n    } else {\r\n      //cut string\r\n      promptText = promptText.slice(dareTextEnd+32);\r\n    }\r\n\r\n    //new object\r\n    dares.push(\r\n      {\r\n        text: extractedText,\r\n        pointValue: 1,\r\n        challengable: false,\r\n        nsfw: false\r\n      }\r\n    );\r\n  }\r\n\r\n  //load penalties\r\n  while(true){\r\n    //find start of penalty\r\n    var penaltyTextStart = promptText.indexOf(\"The Penalty:\");\r\n\r\n    if(penaltyTextStart == -1){\r\n      break;\r\n    }\r\n\r\n    promptText = promptText.slice(penaltyTextStart+13);\r\n\r\n    //find end of penalty\r\n    var penaltyTextEnd = promptText.indexOf(\"The Penalty:\");\r\n\r\n    //extract penalty\r\n    var extractedText = promptText.slice(0, penaltyTextEnd);\r\n\r\n    console.log(extractedText);\r\n\r\n    promptText = promptText.slice(penaltyTextEnd);\r\n\r\n    //new object\r\n    penalties.push(\r\n      {\r\n        text: extractedText\r\n      }\r\n    );\r\n   break;\r\n  }\r\n\r\n  var translation = {\r\n    dares: dares,\r\n    penalties: penalties\r\n  };\r\n\r\n  return translation;\r\n\r\n}\r\n\r\nexport default translate;\r\n"]},"metadata":{},"sourceType":"module"}