{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar MongooseError = require('../error.js');\n/*!\n * DivergentArrayError constructor.\n *\n * @inherits MongooseError\n */\n\n\nfunction DivergentArrayError(paths) {\n  var msg = 'For your own good, using `document.save()` to update an array ' + 'which was selected using an $elemMatch projection OR ' + 'populated using skip, limit, query conditions, or exclusion of ' + 'the _id field when the operation results in a $pop or $set of ' + 'the entire array is not supported. The following ' + 'path(s) would have been modified unsafely:\\n' + '  ' + paths.join('\\n  ') + '\\n' + 'Use Model.update() to update these arrays instead.'; // TODO write up a docs page (FAQ) and link to it\n\n  MongooseError.call(this, msg);\n  Error.captureStackTrace && Error.captureStackTrace(this, arguments.callee);\n  this.name = 'DivergentArrayError';\n}\n/*!\n * Inherits from MongooseError.\n */\n\n\nDivergentArrayError.prototype = Object.create(MongooseError.prototype);\nDivergentArrayError.prototype.constructor = MongooseError;\n/*!\n * exports\n */\n\nmodule.exports = DivergentArrayError;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/error/divergentArray.js"],"names":["MongooseError","require","DivergentArrayError","paths","msg","join","call","Error","captureStackTrace","arguments","callee","name","prototype","Object","create","constructor","module","exports"],"mappings":"AACA;;;AAIA,IAAIA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAA3B;AAEA;;;;;;;AAMA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,MAAIC,GAAG,GAAG,mEACA,uDADA,GAEA,iEAFA,GAGA,gEAHA,GAIA,mDAJA,GAKA,8CALA,GAMA,IANA,GAMOD,KAAK,CAACE,IAAN,CAAW,MAAX,CANP,GAM4B,IAN5B,GAOA,oDAPV,CADkC,CAS1B;;AAERL,EAAAA,aAAa,CAACM,IAAd,CAAmB,IAAnB,EAAyBF,GAAzB;AACAG,EAAAA,KAAK,CAACC,iBAAN,IAA2BD,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8BC,SAAS,CAACC,MAAxC,CAA3B;AACA,OAAKC,IAAL,GAAY,qBAAZ;AACD;AAED;;;;;AAIAT,mBAAmB,CAACU,SAApB,GAAgCC,MAAM,CAACC,MAAP,CAAcd,aAAa,CAACY,SAA5B,CAAhC;AACAV,mBAAmB,CAACU,SAApB,CAA8BG,WAA9B,GAA4Cf,aAA5C;AAGA;;;;AAIAgB,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('../error.js');\n\n/*!\n * DivergentArrayError constructor.\n *\n * @inherits MongooseError\n */\n\nfunction DivergentArrayError(paths) {\n  var msg = 'For your own good, using `document.save()` to update an array '\n          + 'which was selected using an $elemMatch projection OR '\n          + 'populated using skip, limit, query conditions, or exclusion of '\n          + 'the _id field when the operation results in a $pop or $set of '\n          + 'the entire array is not supported. The following '\n          + 'path(s) would have been modified unsafely:\\n'\n          + '  ' + paths.join('\\n  ') + '\\n'\n          + 'Use Model.update() to update these arrays instead.';\n          // TODO write up a docs page (FAQ) and link to it\n\n  MongooseError.call(this, msg);\n  Error.captureStackTrace && Error.captureStackTrace(this, arguments.callee);\n  this.name = 'DivergentArrayError';\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nDivergentArrayError.prototype = Object.create(MongooseError.prototype);\nDivergentArrayError.prototype.constructor = MongooseError;\n\n\n/*!\n * exports\n */\n\nmodule.exports = DivergentArrayError;\n"]},"metadata":{},"sourceType":"script"}