{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBoolean.schemaName = 'Boolean';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return value === true || value === false;\n};\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @api private\n */\n\n\nSchemaBoolean.prototype.cast = function (value) {\n  if (value === null) {\n    return value;\n  }\n\n  if (value === '0') {\n    return false;\n  }\n\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  return !!value;\n};\n\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.cast(val);\n  }\n\n  return this.cast($conditional);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/schema/boolean.js"],"names":["utils","require","SchemaType","SchemaBoolean","path","options","call","schemaName","prototype","Object","create","constructor","checkRequired","value","cast","$conditionalHandlers","castForQuery","$conditional","val","handler","arguments","length","module","exports"],"mappings":"AAAA;;;AAIA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAxB;AAEA;;;;;;;;;;AASA,SAASE,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACpCH,EAAAA,UAAU,CAACI,IAAX,CAAgB,IAAhB,EAAsBF,IAAtB,EAA4BC,OAA5B,EAAqC,SAArC;AACD;AAED;;;;;;;;AAMAF,aAAa,CAACI,UAAd,GAA2B,SAA3B;AAEA;;;;AAGAJ,aAAa,CAACK,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcR,UAAU,CAACM,SAAzB,CAA1B;AACAL,aAAa,CAACK,SAAd,CAAwBG,WAAxB,GAAsCR,aAAtC;AAEA;;;;;;;;;;AAUAA,aAAa,CAACK,SAAd,CAAwBI,aAAxB,GAAwC,UAASC,KAAT,EAAgB;AACtD,SAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAnC;AACD,CAFD;AAIA;;;;;;;;AAOAV,aAAa,CAACK,SAAd,CAAwBM,IAAxB,GAA+B,UAASD,KAAT,EAAgB;AAC7C,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAOA,KAAP;AACD;;AACD,MAAIA,KAAK,KAAK,GAAd,EAAmB;AACjB,WAAO,KAAP;AACD;;AACD,MAAIA,KAAK,KAAK,MAAd,EAAsB;AACpB,WAAO,IAAP;AACD;;AACD,MAAIA,KAAK,KAAK,OAAd,EAAuB;AACrB,WAAO,KAAP;AACD;;AACD,SAAO,CAAC,CAACA,KAAT;AACD,CAdD;;AAgBAV,aAAa,CAACY,oBAAd,GACIf,KAAK,CAACK,OAAN,CAAcH,UAAU,CAACM,SAAX,CAAqBO,oBAAnC,EAAyD,EAAzD,CADJ;AAGA;;;;;;;;AAQAZ,aAAa,CAACK,SAAd,CAAwBQ,YAAxB,GAAuC,UAASC,YAAT,EAAuBC,GAAvB,EAA4B;AACjE,MAAIC,OAAJ;;AACA,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,OAAO,GAAGhB,aAAa,CAACY,oBAAd,CAAmCE,YAAnC,CAAV;;AAEA,QAAIE,OAAJ,EAAa;AACX,aAAOA,OAAO,CAACb,IAAR,CAAa,IAAb,EAAmBY,GAAnB,CAAP;AACD;;AAED,WAAO,KAAKJ,IAAL,CAAUI,GAAV,CAAP;AACD;;AAED,SAAO,KAAKJ,IAAL,CAAUG,YAAV,CAAP;AACD,CAbD;AAeA;;;;;AAIAK,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  if (value === null) {\n    return value;\n  }\n  if (value === '0') {\n    return false;\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return !!value;\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.cast(val);\n  }\n\n  return this.cast($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]},"metadata":{},"sourceType":"script"}