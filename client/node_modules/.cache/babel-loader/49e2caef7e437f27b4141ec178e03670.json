{"ast":null,"code":"/**\n * A class representation of the BSON Symbol type.\n *\n * @class\n * @deprecated\n * @param {string} value the string representing the symbol.\n * @return {Symbol}\n */\nfunction Symbol(value) {\n  if (!(this instanceof Symbol)) return new Symbol(value);\n  this._bsontype = 'Symbol';\n  this.value = value;\n}\n/**\n * Access the wrapped string value.\n *\n * @method\n * @return {String} returns the wrapped string.\n */\n\n\nSymbol.prototype.valueOf = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype.toString = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype.inspect = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype.toJSON = function () {\n  return this.value;\n};\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/symbol.js"],"names":["Symbol","value","_bsontype","prototype","valueOf","toString","inspect","toJSON","module","exports"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAG,EAAE,gBAAgBD,MAAlB,CAAH,EAA8B,OAAO,IAAIA,MAAJ,CAAWC,KAAX,CAAP;AAC9B,OAAKC,SAAL,GAAiB,QAAjB;AACA,OAAKD,KAAL,GAAaA,KAAb;AACD;AAED;;;;;;;;AAMAD,MAAM,CAACG,SAAP,CAAiBC,OAAjB,GAA2B,YAAW;AACpC,SAAO,KAAKH,KAAZ;AACD,CAFD;AAIA;;;;;AAGAD,MAAM,CAACG,SAAP,CAAiBE,QAAjB,GAA4B,YAAW;AACrC,SAAO,KAAKJ,KAAZ;AACD,CAFD;AAIA;;;;;AAGAD,MAAM,CAACG,SAAP,CAAiBG,OAAjB,GAA2B,YAAW;AACpC,SAAO,KAAKL,KAAZ;AACD,CAFD;AAIA;;;;;AAGAD,MAAM,CAACG,SAAP,CAAiBI,MAAjB,GAA0B,YAAW;AACnC,SAAO,KAAKN,KAAZ;AACD,CAFD;;AAIAO,MAAM,CAACC,OAAP,GAAiBT,MAAjB;AACAQ,MAAM,CAACC,OAAP,CAAeT,MAAf,GAAwBA,MAAxB","sourcesContent":["/**\n * A class representation of the BSON Symbol type.\n *\n * @class\n * @deprecated\n * @param {string} value the string representing the symbol.\n * @return {Symbol}\n */\nfunction Symbol(value) {\n  if(!(this instanceof Symbol)) return new Symbol(value);\n  this._bsontype = 'Symbol';\n  this.value = value;\n}\n\n/**\n * Access the wrapped string value.\n *\n * @method\n * @return {String} returns the wrapped string.\n */\nSymbol.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.toString = function() {\n  return this.value;\n}\n\n/**\n * @ignore\n */\nSymbol.prototype.inspect = function() {\n  return this.value;\n}\n\n/**\n * @ignore\n */\nSymbol.prototype.toJSON = function() {\n  return this.value;\n}\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;"]},"metadata":{},"sourceType":"script"}