{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar Binary = require('../drivers').Binary,\n    utils = require('../utils');\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\n\nfunction MongooseBuffer(value, encode, offset) {\n  var length = arguments.length;\n  var val;\n\n  if (length === 0 || arguments[0] === null || arguments[0] === undefined) {\n    val = 0;\n  } else {\n    val = value;\n  }\n\n  var encoding;\n  var path;\n  var doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  var buf = new Buffer(val, encoding, offset);\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true; // make sure these internal props don't show up in Object.keys()\n\n  Object.defineProperties(buf, {\n    validators: {\n      value: []\n    },\n    _path: {\n      value: path\n    },\n    _parent: {\n      value: doc\n    }\n  });\n\n  if (doc && typeof path === 'string') {\n    Object.defineProperty(buf, '_schema', {\n      value: doc.schema.path(path)\n    });\n  }\n\n  buf._subtype = 0;\n  return buf;\n}\n/*!\n * Inherit from Buffer.\n */\n// MongooseBuffer.prototype = new Buffer(0);\n\n\nMongooseBuffer.mixin = {\n  /**\n   * Parent owner document\n   *\n   * @api private\n   * @property _parent\n   * @receiver MongooseBuffer\n   */\n  _parent: undefined,\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n  _markModified: function () {\n    var parent = this._parent;\n\n    if (parent) {\n      parent.markModified(this._path);\n    }\n\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n  write: function () {\n    var written = Buffer.prototype.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n  copy: function (target) {\n    var ret = Buffer.prototype.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n( // node < 0.5\n'writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' + 'writeFloat writeDouble fill ' + 'utf8Write binaryWrite asciiWrite set ' + // node >= 0.5\n'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' + 'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' + 'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE').split(' ').forEach(function (method) {\n  if (!Buffer.prototype[method]) {\n    return;\n  }\n\n  MongooseBuffer.mixin[method] = function () {\n    var ret = Buffer.prototype[method].apply(this, arguments);\n\n    this._markModified();\n\n    return ret;\n  };\n});\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function (options) {\n  var subtype = typeof options === 'number' ? options : this._subtype || 0;\n  return new Binary(this, subtype);\n};\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\n\nMongooseBuffer.mixin.equals = function (other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\n\nMongooseBuffer.mixin.subtype = function (subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n/*!\n * Module exports.\n */\n\n\nMongooseBuffer.Binary = Binary;\nmodule.exports = MongooseBuffer;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/types/buffer.js"],"names":["Binary","require","utils","MongooseBuffer","value","encode","offset","length","arguments","val","undefined","encoding","path","doc","Array","isArray","buf","Buffer","decorate","mixin","isMongooseBuffer","Object","defineProperties","validators","_path","_parent","defineProperty","schema","_subtype","_markModified","parent","markModified","write","written","prototype","apply","copy","target","ret","split","forEach","method","toObject","options","subtype","equals","other","isBuffer","i","TypeError","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar Binary = require('../drivers').Binary,\n    utils = require('../utils');\n\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  var length = arguments.length;\n  var val;\n\n  if (length === 0 || arguments[0] === null || arguments[0] === undefined) {\n    val = 0;\n  } else {\n    val = value;\n  }\n\n  var encoding;\n  var path;\n  var doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  var buf = new Buffer(val, encoding, offset);\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true;\n\n  // make sure these internal props don't show up in Object.keys()\n  Object.defineProperties(buf, {\n    validators: {value: []},\n    _path: {value: path},\n    _parent: {value: doc}\n  });\n\n  if (doc && typeof path === 'string') {\n    Object.defineProperty(buf, '_schema', {\n      value: doc.schema.path(path)\n    });\n  }\n\n  buf._subtype = 0;\n  return buf;\n}\n\n/*!\n * Inherit from Buffer.\n */\n\n// MongooseBuffer.prototype = new Buffer(0);\n\nMongooseBuffer.mixin = {\n\n  /**\n   * Parent owner document\n   *\n   * @api private\n   * @property _parent\n   * @receiver MongooseBuffer\n   */\n\n  _parent: undefined,\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n\n  _markModified: function() {\n    var parent = this._parent;\n\n    if (parent) {\n      parent.markModified(this._path);\n    }\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n\n  write: function() {\n    var written = Buffer.prototype.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n\n  copy: function(target) {\n    var ret = Buffer.prototype.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n(\n// node < 0.5\n    'writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' +\n    'writeFloat writeDouble fill ' +\n    'utf8Write binaryWrite asciiWrite set ' +\n\n// node >= 0.5\n    'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' +\n    'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' +\n    'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE'\n).split(' ').forEach(function(method) {\n  if (!Buffer.prototype[method]) {\n    return;\n  }\n  MongooseBuffer.mixin[method] = function() {\n    var ret = Buffer.prototype[method].apply(this, arguments);\n    this._markModified();\n    return ret;\n  };\n});\n\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function(options) {\n  var subtype = typeof options === 'number'\n      ? options\n      : (this._subtype || 0);\n  return new Binary(this, subtype);\n};\n\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.equals = function(other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.subtype = function(subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n\n/*!\n * Module exports.\n */\n\nMongooseBuffer.Binary = Binary;\n\nmodule.exports = MongooseBuffer;\n"]},"metadata":{},"sourceType":"script"}