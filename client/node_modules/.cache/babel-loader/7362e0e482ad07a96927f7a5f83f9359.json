{"ast":null,"code":"/**\n * A class representation of the BSON RegExp type.\n *\n * @class\n * @return {BSONRegExp} A MinKey instance\n */\nfunction BSONRegExp(pattern, options) {\n  if (!(this instanceof BSONRegExp)) return new BSONRegExp(); // Execute\n\n  this._bsontype = 'BSONRegExp';\n  this.pattern = pattern;\n  this.options = options; // Validate options\n\n  for (var i = 0; i < options.length; i++) {\n    if (!(this.options[i] == 'i' || this.options[i] == 'm' || this.options[i] == 'x' || this.options[i] == 'l' || this.options[i] == 's' || this.options[i] == 'u')) {\n      throw new Error('the regular expression options [' + this.options[i] + \"] is not supported\");\n    }\n  }\n}\n\nmodule.exports = BSONRegExp;\nmodule.exports.BSONRegExp = BSONRegExp;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/regexp.js"],"names":["BSONRegExp","pattern","options","_bsontype","i","length","Error","module","exports"],"mappings":"AAAA;;;;;;AAMA,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,OAA7B,EAAsC;AACpC,MAAG,EAAE,gBAAgBF,UAAlB,CAAH,EAAkC,OAAO,IAAIA,UAAJ,EAAP,CADE,CAGpC;;AACA,OAAKG,SAAL,GAAiB,YAAjB;AACA,OAAKF,OAAL,GAAeA,OAAf;AACA,OAAKC,OAAL,GAAeA,OAAf,CANoC,CAQpC;;AACA,OAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,OAAO,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAG,EAAE,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GAAnB,IACA,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GADnB,IAEA,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GAFnB,IAGA,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GAHnB,IAIA,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GAJnB,IAKA,KAAKF,OAAL,CAAaE,CAAb,KAAmB,GALrB,CAAH,EAMG;AACD,YAAM,IAAIE,KAAJ,CAAU,qCAAqC,KAAKJ,OAAL,CAAaE,CAAb,CAArC,GAAuD,oBAAjE,CAAN;AACD;AACF;AACF;;AAEDG,MAAM,CAACC,OAAP,GAAiBR,UAAjB;AACAO,MAAM,CAACC,OAAP,CAAeR,UAAf,GAA4BA,UAA5B","sourcesContent":["/**\n * A class representation of the BSON RegExp type.\n *\n * @class\n * @return {BSONRegExp} A MinKey instance\n */\nfunction BSONRegExp(pattern, options) {\n  if(!(this instanceof BSONRegExp)) return new BSONRegExp();\n  \n  // Execute\n  this._bsontype = 'BSONRegExp';\n  this.pattern = pattern;\n  this.options = options;\n\n  // Validate options\n  for(var i = 0; i < options.length; i++) {\n    if(!(this.options[i] == 'i' \n      || this.options[i] == 'm'\n      || this.options[i] == 'x'\n      || this.options[i] == 'l'\n      || this.options[i] == 's'\n      || this.options[i] == 'u'\n    )) {\n      throw new Error('the regular expression options [' + this.options[i] + \"] is not supported\");\n    }\n  }\n}\n\nmodule.exports = BSONRegExp;\nmodule.exports.BSONRegExp = BSONRegExp;"]},"metadata":{},"sourceType":"script"}