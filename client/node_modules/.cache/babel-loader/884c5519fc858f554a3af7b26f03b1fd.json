{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\SATAN\\\\darelist\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { ADD_PLAYER, GET_PLAYERS, DELETE_PLAYERS, DARE_PLAYERS, RESET_PLAYERS, UPDATE_USERNAME, DARE_PLAYER, RESET_PLAYER, DELETE_PLAYER, PENALISE_PLAYER } from '../actions/types.js';\nconst initialState = {\n  players: [{\n    id: 0,\n    name: \"\",\n    multiplier: 0,\n    dares: []\n  }],\n  playerCount: 1\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return _objectSpread({}, state);\n\n    case DELETE_PLAYERS:\n      return _objectSpread({}, state, {\n        players: []\n      });\n\n    case ADD_PLAYER:\n      return _objectSpread({}, state, {\n        players: [...state.players, {\n          id: state.playerCount,\n          name: \"\",\n          multiplier: 0,\n          dares: [],\n          penalties: []\n        }],\n        playerCount: state.playerCount + 1\n      });\n\n    case RESET_PLAYERS:\n      return _objectSpread({}, state, {\n        players: state.players.map(player => {\n          const newPlayer = {\n            id: player.id,\n            name: player.name,\n            multiplier: player.multiplier,\n            dares: [],\n            penalties: []\n          };\n          return newPlayer;\n        })\n      });\n\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        players: state.players.map(player => {\n          if (player.id == action.payload.id) {\n            const newPlayer = {\n              id: player.id,\n              name: action.payload.value,\n              multiplier: player.multiplier,\n              dares: player.dares,\n              penalties: player.penalties\n            };\n            return newPlayer;\n          } else {\n            return player;\n          }\n        })\n      });\n\n    case DARE_PLAYER:\n      return _objectSpread({}, state, {\n        players: state.players.map(player => {\n          if (player.id == action.payload.id) {\n            const newPlayer = {\n              id: player.id,\n              name: player.name,\n              multiplier: player.multiplier,\n              dares: [...player.dares, action.payload.dare]\n            };\n            return newPlayer;\n          } else {\n            return player;\n          }\n        })\n      });\n\n    case PENALISE_PLAYER:\n      return _objectSpread({}, state, {\n        players: state.players.map(player => {\n          if (player.id == action.payload.playerID) {\n            const newPlayer = {\n              id: player.id,\n              name: player.name,\n              multiplier: player.multiplier,\n              dares: player.dares.map(dare => {\n                if (dare.id == action.payload.dareID) {\n                  const newDare = {\n                    text: dare.text,\n                    pointValue: dare.pointValue,\n                    challengable: dare.challengable,\n                    nsfw: dare.nsfw,\n                    penalty: action.payload.penalty\n                  };\n                  return newDare;\n                } else {\n                  return dare;\n                }\n              })\n            };\n            return newPlayer;\n          } else {\n            return player;\n          }\n        })\n      });\n\n    case RESET_PLAYER:\n      return _objectSpread({}, state, {\n        players: state.players.map(player => {\n          if (player.id == action.payload) {\n            const newPlayer = {\n              id: player.id,\n              name: player.name,\n              multiplier: player.multiplier,\n              dares: [],\n              penalties: []\n            };\n            return newPlayer;\n          } else {\n            return player;\n          }\n        })\n      });\n\n    case DELETE_PLAYER:\n      return _objectSpread({}, state, {\n        players: state.players.filter(player => player.id != action.payload)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/src/reducers/playerReducer.js"],"names":["ADD_PLAYER","GET_PLAYERS","DELETE_PLAYERS","DARE_PLAYERS","RESET_PLAYERS","UPDATE_USERNAME","DARE_PLAYER","RESET_PLAYER","DELETE_PLAYER","PENALISE_PLAYER","initialState","players","id","name","multiplier","dares","playerCount","state","action","type","penalties","map","player","newPlayer","payload","value","dare","playerID","dareID","newDare","text","pointValue","challengable","nsfw","penalty","filter"],"mappings":"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","sourcesContent":["import {\r\n  ADD_PLAYER,\r\n  GET_PLAYERS,\r\n  DELETE_PLAYERS,\r\n  DARE_PLAYERS,\r\n  RESET_PLAYERS,\r\n  UPDATE_USERNAME,\r\n  DARE_PLAYER,\r\n  RESET_PLAYER,\r\n  DELETE_PLAYER,\r\n  PENALISE_PLAYER\r\n } from '../actions/types.js';\r\n\r\nconst initialState = {\r\n  players: [{\r\n    id: 0,\r\n    name: \"\",\r\n    multiplier: 0,\r\n    dares: []\r\n  }],\r\n  playerCount: 1\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n  switch(action.type) {\r\n    case GET_PLAYERS:\r\n      return {\r\n        ...state\r\n      };\r\n    case DELETE_PLAYERS:\r\n      return {\r\n        ...state,\r\n        players: []\r\n      };\r\n    case ADD_PLAYER:\r\n      return {\r\n        ...state,\r\n        players: [...state.players, {\r\n          id: state.playerCount,\r\n          name: \"\",\r\n          multiplier: 0,\r\n          dares: [],\r\n          penalties: []\r\n        }],\r\n        playerCount: state.playerCount + 1\r\n      };\r\n    case RESET_PLAYERS:\r\n      return {\r\n        ...state,\r\n        players: state.players.map((player) => {\r\n          const newPlayer = {\r\n            id: player.id,\r\n            name: player.name,\r\n            multiplier: player.multiplier,\r\n            dares: [],\r\n            penalties: []\r\n          }\r\n          return newPlayer;\r\n        })\r\n      };\r\n    case UPDATE_USERNAME:\r\n      return {\r\n        ...state,\r\n        players: state.players.map((player) => {\r\n          if(player.id == action.payload.id){\r\n            const newPlayer = {\r\n              id: player.id,\r\n              name: action.payload.value,\r\n              multiplier: player.multiplier,\r\n              dares: player.dares,\r\n              penalties: player.penalties\r\n            }\r\n            return newPlayer;\r\n          } else {\r\n            return player;\r\n          }\r\n        })\r\n      };\r\n    case DARE_PLAYER:\r\n      return {\r\n        ...state,\r\n        players: state.players.map((player) => {\r\n          if(player.id == action.payload.id){\r\n            const newPlayer = {\r\n              id: player.id,\r\n              name: player.name,\r\n              multiplier: player.multiplier,\r\n              dares: [...player.dares, action.payload.dare]\r\n            }\r\n            return newPlayer;\r\n          } else {\r\n            return player;\r\n          }\r\n        })\r\n      };\r\n    case PENALISE_PLAYER:\r\n      return {\r\n        ...state,\r\n        players: state.players.map((player) => {\r\n          if(player.id == action.payload.playerID){\r\n            const newPlayer = {\r\n              id: player.id,\r\n              name: player.name,\r\n              multiplier: player.multiplier,\r\n              dares: player.dares.map((dare) => {\r\n                if(dare.id == action.payload.dareID){\r\n                  const newDare = {\r\n                    text: dare.text,\r\n                    pointValue: dare.pointValue,\r\n                    challengable: dare.challengable,\r\n                    nsfw: dare.nsfw,\r\n                    penalty: action.payload.penalty\r\n                  };\r\n                  return newDare;\r\n                } else {\r\n                  return dare;\r\n                }\r\n              })\r\n            }\r\n            return newPlayer;\r\n          } else {\r\n            return player;\r\n          }\r\n        })\r\n      };\r\n    case RESET_PLAYER:\r\n      return {\r\n        ...state,\r\n        players: state.players.map((player) => {\r\n          if(player.id == action.payload){\r\n            const newPlayer = {\r\n              id: player.id,\r\n              name: player.name,\r\n              multiplier: player.multiplier,\r\n              dares: [],\r\n              penalties: []\r\n            }\r\n            return newPlayer;\r\n          } else {\r\n            return player;\r\n          }\r\n        })\r\n      };\r\n    case DELETE_PLAYER:\r\n      return {\r\n        ...state,\r\n        players: state.players.filter(player => player.id != action.payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}