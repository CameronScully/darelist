{"ast":null,"code":"/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\nvar ArrayType = require('./array');\n\nvar CastError = require('../error/cast');\n\nvar MongooseDocumentArray = require('../types/documentarray');\n\nvar SchemaType = require('../schematype');\n\nvar Subdocument = require('../types/embedded');\n\nvar util = require('util');\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @inherits SchemaArray\n * @api public\n */\n\n\nfunction DocumentArray(key, schema, options) {\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n  }\n\n  EmbeddedDocument.prototype = Object.create(Subdocument.prototype);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema; // apply methods\n\n  for (var i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  } // apply statics\n\n\n  for (i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  EmbeddedDocument.options = options;\n  ArrayType.call(this, key, EmbeddedDocument, options);\n  this.schema = schema;\n  this.$isMongooseDocumentArray = true;\n  var fn = this.defaultValue;\n\n  if (!('defaultValue' in this) || fn !== void 0) {\n    this.default(function () {\n      var arr = fn.call(this);\n\n      if (!Array.isArray(arr)) {\n        arr = [arr];\n      } // Leave it up to `cast()` to convert this to a documentarray\n\n\n      return arr;\n    });\n  }\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nDocumentArray.schemaName = 'DocumentArray';\n/*!\n * Inherits from ArrayType.\n */\n\nDocumentArray.prototype = Object.create(ArrayType.prototype);\nDocumentArray.prototype.constructor = DocumentArray;\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nDocumentArray.prototype.doValidate = function (array, fn, scope, options) {\n  var _this = this;\n\n  SchemaType.prototype.doValidate.call(this, array, function (err) {\n    if (err) {\n      return fn(err);\n    }\n\n    var count = array && array.length;\n    var error;\n\n    if (!count) {\n      return fn();\n    }\n\n    if (options && options.updateValidator) {\n      return fn();\n    } // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n\n    function callback(err) {\n      if (err) {\n        error = err;\n      }\n\n      --count || fn(error);\n    }\n\n    for (var i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      var doc = array[i];\n\n      if (!doc) {\n        --count || fn(error);\n        continue;\n      } // If you set the array index directly, the doc might not yet be\n      // a full fledged mongoose subdoc, so make it into one.\n\n\n      if (!(doc instanceof Subdocument)) {\n        doc = array[i] = new _this.casterConstructor(doc, array, undefined, undefined, i);\n      } // HACK: use $__original_validate to avoid promises so bluebird doesn't\n      // complain\n\n\n      if (doc.$__original_validate) {\n        doc.$__original_validate({\n          __noPromise: true\n        }, callback);\n      } else {\n        doc.validate({\n          __noPromise: true\n        }, callback);\n      }\n    }\n  }, scope);\n};\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\n\nDocumentArray.prototype.doValidateSync = function (array, scope) {\n  var schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n\n  if (schemaTypeError) {\n    return schemaTypeError;\n  }\n\n  var count = array && array.length,\n      resultError = null;\n\n  if (!count) {\n    return;\n  } // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n\n  for (var i = 0, len = count; i < len; ++i) {\n    // only first error\n    if (resultError) {\n      break;\n    } // sidestep sparse entries\n\n\n    var doc = array[i];\n\n    if (!doc) {\n      continue;\n    }\n\n    var subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\n\nDocumentArray.prototype.cast = function (value, doc, init, prev, options) {\n  var selected, subdoc, i;\n\n  if (!Array.isArray(value)) {\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(this.path);\n    }\n\n    return this.cast([value], doc, init, prev);\n  }\n\n  if (!(value && value.isMongooseDocumentArray) && (!options || !options.skipDocumentArrayCast)) {\n    value = new MongooseDocumentArray(value, this.path, doc);\n\n    if (prev && prev._handlers) {\n      for (var key in prev._handlers) {\n        doc.removeListener(key, prev._handlers[key]);\n      }\n    }\n  } else if (value && value.isMongooseDocumentArray) {\n    // We need to create a new array, otherwise change tracking will\n    // update the old doc (gh-4449)\n    value = new MongooseDocumentArray(value, this.path, doc);\n  }\n\n  i = value.length;\n\n  while (i--) {\n    if (!value[i]) {\n      continue;\n    } // Check if the document has a different schema (re gh-3701)\n\n\n    if (value[i] instanceof Subdocument && value[i].schema !== this.casterConstructor.schema) {\n      value[i] = value[i].toObject({\n        transform: false,\n        virtuals: false\n      });\n    }\n\n    if (!(value[i] instanceof Subdocument) && value[i]) {\n      if (init) {\n        if (doc) {\n          selected || (selected = scopePaths(this, doc.$__.selected, init));\n        } else {\n          selected = true;\n        }\n\n        subdoc = new this.casterConstructor(null, value, true, selected, i);\n        value[i] = subdoc.init(value[i]);\n      } else {\n        try {\n          subdoc = prev.id(value[i]._id);\n        } catch (e) {}\n\n        if (prev && subdoc) {\n          // handle resetting doc with existing id but differing data\n          // doc.array = [{ doc: 'val' }]\n          subdoc.set(value[i]); // if set() is hooked it will have no return value\n          // see gh-746\n\n          value[i] = subdoc;\n        } else {\n          try {\n            subdoc = new this.casterConstructor(value[i], value, undefined, undefined, i); // if set() is hooked it will have no return value\n            // see gh-746\n\n            value[i] = subdoc;\n          } catch (error) {\n            var valueInErrorMessage = util.inspect(value[i]);\n            throw new CastError('embedded', valueInErrorMessage, value._path, error);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n/*!\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArray} array - the array to scope `fields` paths\n * @param {Object|undefined} fields - the root fields selected in the query\n * @param {Boolean|undefined} init - if we are being created part of a query result\n */\n\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  var path = array.path + '.',\n      keys = Object.keys(fields),\n      i = keys.length,\n      selected = {},\n      hasKeys,\n      key;\n\n  while (i--) {\n    key = keys[i];\n\n    if (key.indexOf(path) === 0) {\n      hasKeys || (hasKeys = true);\n      selected[key.substring(path.length)] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = DocumentArray;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/schema/documentarray.js"],"names":["ArrayType","require","CastError","MongooseDocumentArray","SchemaType","Subdocument","util","DocumentArray","key","schema","options","EmbeddedDocument","apply","arguments","prototype","Object","create","$__setSchema","i","methods","statics","call","$isMongooseDocumentArray","fn","defaultValue","default","arr","Array","isArray","schemaName","constructor","doValidate","array","scope","_this","err","count","length","error","updateValidator","callback","len","doc","casterConstructor","undefined","$__original_validate","__noPromise","validate","doValidateSync","schemaTypeError","resultError","subdocValidateError","validateSync","cast","value","init","prev","selected","subdoc","markModified","path","isMongooseDocumentArray","skipDocumentArrayCast","_handlers","removeListener","toObject","transform","virtuals","scopePaths","$__","id","_id","e","set","valueInErrorMessage","inspect","_path","fields","keys","hasKeys","indexOf","substring","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\n\nvar ArrayType = require('./array');\nvar CastError = require('../error/cast');\nvar MongooseDocumentArray = require('../types/documentarray');\nvar SchemaType = require('../schematype');\nvar Subdocument = require('../types/embedded');\nvar util = require('util');\n\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @inherits SchemaArray\n * @api public\n */\n\nfunction DocumentArray(key, schema, options) {\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n  }\n\n  EmbeddedDocument.prototype = Object.create(Subdocument.prototype);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema;\n\n  // apply methods\n  for (var i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  EmbeddedDocument.options = options;\n\n  ArrayType.call(this, key, EmbeddedDocument, options);\n\n  this.schema = schema;\n  this.$isMongooseDocumentArray = true;\n  var fn = this.defaultValue;\n\n  if (!('defaultValue' in this) || fn !== void 0) {\n    this.default(function() {\n      var arr = fn.call(this);\n      if (!Array.isArray(arr)) {\n        arr = [arr];\n      }\n      // Leave it up to `cast()` to convert this to a documentarray\n      return arr;\n    });\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDocumentArray.schemaName = 'DocumentArray';\n\n/*!\n * Inherits from ArrayType.\n */\nDocumentArray.prototype = Object.create(ArrayType.prototype);\nDocumentArray.prototype.constructor = DocumentArray;\n\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nDocumentArray.prototype.doValidate = function(array, fn, scope, options) {\n  var _this = this;\n  SchemaType.prototype.doValidate.call(this, array, function(err) {\n    if (err) {\n      return fn(err);\n    }\n\n    var count = array && array.length;\n    var error;\n\n    if (!count) {\n      return fn();\n    }\n    if (options && options.updateValidator) {\n      return fn();\n    }\n\n    // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n    function callback(err) {\n      if (err) {\n        error = err;\n      }\n      --count || fn(error);\n    }\n\n    for (var i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      var doc = array[i];\n      if (!doc) {\n        --count || fn(error);\n        continue;\n      }\n\n      // If you set the array index directly, the doc might not yet be\n      // a full fledged mongoose subdoc, so make it into one.\n      if (!(doc instanceof Subdocument)) {\n        doc = array[i] = new _this.casterConstructor(doc, array, undefined,\n            undefined, i);\n      }\n\n      // HACK: use $__original_validate to avoid promises so bluebird doesn't\n      // complain\n      if (doc.$__original_validate) {\n        doc.$__original_validate({__noPromise: true}, callback);\n      } else {\n        doc.validate({__noPromise: true}, callback);\n      }\n    }\n  }, scope);\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\nDocumentArray.prototype.doValidateSync = function(array, scope) {\n  var schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n  if (schemaTypeError) {\n    return schemaTypeError;\n  }\n\n  var count = array && array.length,\n      resultError = null;\n\n  if (!count) {\n    return;\n  }\n\n  // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n  for (var i = 0, len = count; i < len; ++i) {\n    // only first error\n    if (resultError) {\n      break;\n    }\n    // sidestep sparse entries\n    var doc = array[i];\n    if (!doc) {\n      continue;\n    }\n\n    var subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\nDocumentArray.prototype.cast = function(value, doc, init, prev, options) {\n  var selected,\n      subdoc,\n      i;\n\n  if (!Array.isArray(value)) {\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init, prev);\n  }\n\n  if (!(value && value.isMongooseDocumentArray) &&\n      (!options || !options.skipDocumentArrayCast)) {\n    value = new MongooseDocumentArray(value, this.path, doc);\n    if (prev && prev._handlers) {\n      for (var key in prev._handlers) {\n        doc.removeListener(key, prev._handlers[key]);\n      }\n    }\n  } else if (value && value.isMongooseDocumentArray) {\n    // We need to create a new array, otherwise change tracking will\n    // update the old doc (gh-4449)\n    value = new MongooseDocumentArray(value, this.path, doc);\n  }\n\n  i = value.length;\n\n  while (i--) {\n    if (!value[i]) {\n      continue;\n    }\n    // Check if the document has a different schema (re gh-3701)\n    if ((value[i] instanceof Subdocument) &&\n        value[i].schema !== this.casterConstructor.schema) {\n      value[i] = value[i].toObject({ transform: false, virtuals: false });\n    }\n    if (!(value[i] instanceof Subdocument) && value[i]) {\n      if (init) {\n        if (doc) {\n          selected || (selected = scopePaths(this, doc.$__.selected, init));\n        } else {\n          selected = true;\n        }\n\n        subdoc = new this.casterConstructor(null, value, true, selected, i);\n        value[i] = subdoc.init(value[i]);\n      } else {\n        try {\n          subdoc = prev.id(value[i]._id);\n        } catch (e) {\n        }\n\n        if (prev && subdoc) {\n          // handle resetting doc with existing id but differing data\n          // doc.array = [{ doc: 'val' }]\n          subdoc.set(value[i]);\n          // if set() is hooked it will have no return value\n          // see gh-746\n          value[i] = subdoc;\n        } else {\n          try {\n            subdoc = new this.casterConstructor(value[i], value, undefined,\n                undefined, i);\n            // if set() is hooked it will have no return value\n            // see gh-746\n            value[i] = subdoc;\n          } catch (error) {\n            var valueInErrorMessage = util.inspect(value[i]);\n            throw new CastError('embedded', valueInErrorMessage,\n              value._path, error);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n\n/*!\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArray} array - the array to scope `fields` paths\n * @param {Object|undefined} fields - the root fields selected in the query\n * @param {Boolean|undefined} init - if we are being created part of a query result\n */\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  var path = array.path + '.',\n      keys = Object.keys(fields),\n      i = keys.length,\n      selected = {},\n      hasKeys,\n      key;\n\n  while (i--) {\n    key = keys[i];\n    if (key.indexOf(path) === 0) {\n      hasKeys || (hasKeys = true);\n      selected[key.substring(path.length)] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = DocumentArray;\n"]},"metadata":{},"sourceType":"script"}