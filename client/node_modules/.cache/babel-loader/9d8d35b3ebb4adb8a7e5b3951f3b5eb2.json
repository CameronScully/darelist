{"ast":null,"code":"\"use strict\";\n\nvar writeIEEE754 = require('../float_parser').writeIEEE754,\n    readIEEE754 = require('../float_parser').readIEEE754,\n    Long = require('../long').Long,\n    Map = require('../map'),\n    Double = require('../double').Double,\n    Timestamp = require('../timestamp').Timestamp,\n    ObjectID = require('../objectid').ObjectID,\n    Symbol = require('../symbol').Symbol,\n    Code = require('../code').Code,\n    BSONRegExp = require('../regexp').BSONRegExp,\n    Int32 = require('../int_32').Int32,\n    MinKey = require('../min_key').MinKey,\n    MaxKey = require('../max_key').MaxKey,\n    Decimal128 = require('../decimal128'),\n    DBRef = require('../db_ref').DBRef,\n    Binary = require('../binary').Binary;\n\ntry {\n  var _Buffer = Uint8Array;\n} catch (e) {\n  var _Buffer = Buffer;\n}\n\nvar regexp = /\\x00/; // To ensure that 0.4 of node works correctly\n\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n};\n\nvar serializeString = function (buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = BSON.BSON_DATA_STRING; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0; // Write the string\n\n  var size = buffer.write(value, index + 4, 'utf8'); // Write the size of the string to buffer\n\n  buffer[index + 3] = size + 1 >> 24 & 0xff;\n  buffer[index + 2] = size + 1 >> 16 & 0xff;\n  buffer[index + 1] = size + 1 >> 8 & 0xff;\n  buffer[index] = size + 1 & 0xff; // Update index\n\n  index = index + 4 + size; // Write zero\n\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeNumber = function (buffer, key, value, index, isArray) {\n  // We have an integer value\n  if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = BSON.BSON_DATA_INT; // Number of written bytes\n\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0; // Write the int value\n\n      buffer[index++] = value & 0xff;\n      buffer[index++] = value >> 8 & 0xff;\n      buffer[index++] = value >> 16 & 0xff;\n      buffer[index++] = value >> 24 & 0xff;\n    } else if (value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = BSON.BSON_DATA_NUMBER; // Number of written bytes\n\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0; // Write float\n\n      writeIEEE754(buffer, value, index, 'little', 52, 8); // Ajust index\n\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_LONG; // Number of written bytes\n\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      var longVal = Long.fromNumber(value);\n      var lowBits = longVal.getLowBits();\n      var highBits = longVal.getHighBits(); // Encode low bits\n\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = lowBits >> 8 & 0xff;\n      buffer[index++] = lowBits >> 16 & 0xff;\n      buffer[index++] = lowBits >> 24 & 0xff; // Encode high bits\n\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = highBits >> 8 & 0xff;\n      buffer[index++] = highBits >> 16 & 0xff;\n      buffer[index++] = highBits >> 24 & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = BSON.BSON_DATA_NUMBER; // Number of written bytes\n\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0; // Write float\n\n    writeIEEE754(buffer, value, index, 'little', 52, 8); // Ajust index\n\n    index = index + 8;\n  }\n\n  return index;\n};\n\nvar serializeUndefined = function (buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = BSON.BSON_DATA_NULL; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeBoolean = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BOOLEAN; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Encode the boolean value\n\n  buffer[index++] = value ? 1 : 0;\n  return index;\n};\n\nvar serializeDate = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_DATE; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the date\n\n  var dateInMilis = Long.fromNumber(value.getTime());\n  var lowBits = dateInMilis.getLowBits();\n  var highBits = dateInMilis.getHighBits(); // Encode low bits\n\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = lowBits >> 8 & 0xff;\n  buffer[index++] = lowBits >> 16 & 0xff;\n  buffer[index++] = lowBits >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = highBits >> 8 & 0xff;\n  buffer[index++] = highBits >> 16 & 0xff;\n  buffer[index++] = highBits >> 24 & 0xff;\n  return index;\n};\n\nvar serializeRegExp = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error(\"value \" + value.source + \" must not contain null bytes\");\n  } // Adjust the index\n\n\n  index = index + buffer.write(value.source, index, 'utf8'); // Write zero\n\n  buffer[index++] = 0x00; // Write the parameters\n\n  if (value.global) buffer[index++] = 0x73; // s\n\n  if (value.ignoreCase) buffer[index++] = 0x69; // i\n\n  if (value.multiline) buffer[index++] = 0x6d; // m\n  // Add ending zero\n\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeBSONRegExp = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Adjust the index\n\n  index = index + buffer.write(value.pattern, index, 'utf8'); // Write zero\n\n  buffer[index++] = 0x00; // Write the options\n\n  index = index + buffer.write(value.options.split('').sort().join(''), index, 'utf8'); // Add ending zero\n\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeMinMax = function (buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if (value === null) {\n    buffer[index++] = BSON.BSON_DATA_NULL;\n  } else if (value instanceof MinKey) {\n    buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n  } // Number of written bytes\n\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeObjectId = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OID; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the objectId into the shared buffer\n\n  if (typeof value.id == 'string') {\n    buffer.write(value.id, index, 'binary');\n  } else if (value.id && value.id.copy) {\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new Error('object [' + JSON.stringify(value) + \"] is not a valid ObjectId\");\n  } // Ajust index\n\n\n  return index + 12;\n};\n\nvar serializeBuffer = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Get size of the buffer (current write point)\n\n  var size = value.length; // Write the size of the string to buffer\n\n  buffer[index++] = size & 0xff;\n  buffer[index++] = size >> 8 & 0xff;\n  buffer[index++] = size >> 16 & 0xff;\n  buffer[index++] = size >> 24 & 0xff; // Write the default subtype\n\n  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT; // Copy the content form the binary field to the buffer\n\n  value.copy(buffer, index, 0, size); // Adjust the index\n\n  index = index + size;\n  return index;\n};\n\nvar serializeObject = function (buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {\n  for (var i = 0; i < path.length; i++) {\n    if (path[i] === value) throw new Error('cyclic dependency detected');\n  } // Push value to stack\n\n\n  path.push(value); // Write the type\n\n  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path); // Pop stack\n\n  path.pop(); // Write size\n\n  var size = endIndex - index;\n  return endIndex;\n};\n\nvar serializeDecimal128 = function (buffer, key, value, index, isArray) {\n  buffer[index++] = BSON.BSON_DATA_DECIMAL128; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the data from the value\n\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n};\n\nvar serializeLong = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = value._bsontype == 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the date\n\n  var lowBits = value.getLowBits();\n  var highBits = value.getHighBits(); // Encode low bits\n\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = lowBits >> 8 & 0xff;\n  buffer[index++] = lowBits >> 16 & 0xff;\n  buffer[index++] = lowBits >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = highBits >> 8 & 0xff;\n  buffer[index++] = highBits >> 16 & 0xff;\n  buffer[index++] = highBits >> 24 & 0xff;\n  return index;\n};\n\nvar serializeInt32 = function (buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = BSON.BSON_DATA_INT; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the int value\n\n  buffer[index++] = value & 0xff;\n  buffer[index++] = value >> 8 & 0xff;\n  buffer[index++] = value >> 16 & 0xff;\n  buffer[index++] = value >> 24 & 0xff;\n  return index;\n};\n\nvar serializeDouble = function (buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = BSON.BSON_DATA_NUMBER; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write float\n\n  writeIEEE754(buffer, value, index, 'little', 52, 8); // Ajust index\n\n  index = index + 8;\n  return index;\n};\n\nvar serializeFunction = function (buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = BSON.BSON_DATA_CODE; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Function string\n\n  var functionString = value.toString(); // Write the string\n\n  var size = buffer.write(functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer\n\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = size >> 8 & 0xff;\n  buffer[index + 2] = size >> 16 & 0xff;\n  buffer[index + 3] = size >> 24 & 0xff; // Update index\n\n  index = index + 4 + size - 1; // Write zero\n\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeCode = function (buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {\n  if (value.scope && typeof value.scope == 'object') {\n    // Write the type\n    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE; // Number of written bytes\n\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0; // Starting index\n\n    var startIndex = index; // Serialize the function\n    // Get the function string\n\n    var functionString = typeof value.code == 'string' ? value.code : value.code.toString(); // Index adjustment\n\n    index = index + 4; // Write string into buffer\n\n    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer\n\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = codeSize >> 8 & 0xff;\n    buffer[index + 2] = codeSize >> 16 & 0xff;\n    buffer[index + 3] = codeSize >> 24 & 0xff; // Write end 0\n\n    buffer[index + 4 + codeSize - 1] = 0; // Write the\n\n    index = index + codeSize + 4; //\n    // Serialize the scope value\n\n    var endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);\n    index = endIndex - 1; // Writ the total\n\n    var totalSize = endIndex - startIndex; // Write the total size of the object\n\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = totalSize >> 8 & 0xff;\n    buffer[startIndex++] = totalSize >> 16 & 0xff;\n    buffer[startIndex++] = totalSize >> 24 & 0xff; // Write trailing zero\n\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_CODE; // Number of written bytes\n\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0; // Function string\n\n    var functionString = value.code.toString(); // Write the string\n\n    var size = buffer.write(functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer\n\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = size >> 8 & 0xff;\n    buffer[index + 2] = size >> 16 & 0xff;\n    buffer[index + 3] = size >> 24 & 0xff; // Update index\n\n    index = index + 4 + size - 1; // Write zero\n\n    buffer[index++] = 0;\n  }\n\n  return index;\n};\n\nvar serializeBinary = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Extract the buffer\n\n  var data = value.value(true); // Calculate size\n\n  var size = value.position; // Add the deprecated 02 type 4 bytes of size to total\n\n  if (value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) size = size + 4; // Write the size of the string to buffer\n\n  buffer[index++] = size & 0xff;\n  buffer[index++] = size >> 8 & 0xff;\n  buffer[index++] = size >> 16 & 0xff;\n  buffer[index++] = size >> 24 & 0xff; // Write the subtype to the buffer\n\n  buffer[index++] = value.sub_type; // If we have binary type 2 the 4 first bytes are the size\n\n  if (value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = size >> 8 & 0xff;\n    buffer[index++] = size >> 16 & 0xff;\n    buffer[index++] = size >> 24 & 0xff;\n  } // Write the data to the object\n\n\n  data.copy(buffer, index, 0, value.position); // Adjust the index\n\n  index = index + value.position;\n  return index;\n};\n\nvar serializeSymbol = function (buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_SYMBOL; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0; // Write the string\n\n  var size = buffer.write(value.value, index + 4, 'utf8') + 1; // Write the size of the string to buffer\n\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = size >> 8 & 0xff;\n  buffer[index + 2] = size >> 16 & 0xff;\n  buffer[index + 3] = size >> 24 & 0xff; // Update index\n\n  index = index + 4 + size - 1; // Write zero\n\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeDBRef = function (buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OBJECT; // Number of written bytes\n\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii'); // Encode the name\n\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var startIndex = index;\n  var endIndex; // Serialize object\n\n  if (null != value.db) {\n    endIndex = serializeInto(buffer, {\n      '$ref': value.namespace,\n      '$id': value.oid,\n      '$db': value.db\n    }, false, index, depth + 1, serializeFunctions);\n  } else {\n    endIndex = serializeInto(buffer, {\n      '$ref': value.namespace,\n      '$id': value.oid\n    }, false, index, depth + 1, serializeFunctions);\n  } // Calculate object size\n\n\n  var size = endIndex - startIndex; // Write the size\n\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = size >> 8 & 0xff;\n  buffer[startIndex++] = size >> 16 & 0xff;\n  buffer[startIndex++] = size >> 24 & 0xff; // Set index\n\n  return endIndex;\n};\n\nvar serializeInto = function serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n  startingIndex = startingIndex || 0;\n  path = path || []; // Push the object to the path\n\n  path.push(object); // Start place to serialize into\n\n  var index = startingIndex + 4;\n  var self = this; // Special case isArray\n\n  if (Array.isArray(object)) {\n    // Get object keys\n    for (var i = 0; i < object.length; i++) {\n      var key = \"\" + i;\n      var value = object[i]; // Is there an override value\n\n      if (value && value.toBSON) {\n        if (typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      }\n\n      var type = typeof value;\n\n      if (type == 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if (type == 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if (type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if (type == 'undefined' || value == null) {\n        index = serializeUndefined(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if (type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);\n      } else if (type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if (typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions, true);\n      } else if (value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);\n      } else if (value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if (value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if (value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      }\n    }\n  } else if (object instanceof Map) {\n    var iterator = object.entries();\n    var done = false;\n\n    while (!done) {\n      // Unpack the next entry\n      var entry = iterator.next();\n      done = entry.done; // Are we done, then skip and terminate\n\n      if (done) continue; // Get the entry values\n\n      var key = entry.value[0];\n      var value = entry.value[1]; // Check the type of the value\n\n      var type = typeof value; // Check the key and throw error if it's illegal\n\n      if (key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if ('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined && ignoreUndefined == true) {} else if (value === null || value === undefined) {\n        index = serializeUndefined(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if (type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if (typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if (object.toBSON) {\n      if (typeof object.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n      object = object.toBSON();\n      if (object != null && typeof object != 'object') throw new Error(\"toBSON function did not return an object\");\n    } // Iterate over all the keys\n\n\n    for (var key in object) {\n      var value = object[key]; // Is there an override value\n\n      if (value && value.toBSON) {\n        if (typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      } // Check the type of the value\n\n\n      var type = typeof value; // Check the key and throw error if it's illegal\n\n      if (key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if ('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined && ignoreUndefined == true) {} else if (value === null || value === undefined) {\n        index = serializeUndefined(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if (type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if (typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } // Remove the path\n\n\n  path.pop(); // Final padding byte for object\n\n  buffer[index++] = 0x00; // Final size\n\n  var size = index - startingIndex; // Write the size of the object\n\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = size >> 8 & 0xff;\n  buffer[startingIndex++] = size >> 16 & 0xff;\n  buffer[startingIndex++] = size >> 24 & 0xff;\n  return index;\n};\n\nvar BSON = {};\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\n\nvar functionCache = BSON.functionCache = {};\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\n\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\n\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\n\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\n\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\n\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type, deprecated\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\n\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\n\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\n\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\n\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\n\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\n\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\n\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\n\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\n\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\n\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\n\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\n\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\n\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\n\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\n\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\n\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\n\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\n\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\n\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\n\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\n\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128; // BSON MAX VALUES\n\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63); // JS MAX PRECISE VALUES\n\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\n\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n// Internal long versions\n\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = serializeInto;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/parser/serializer.js"],"names":["writeIEEE754","require","readIEEE754","Long","Map","Double","Timestamp","ObjectID","Symbol","Code","BSONRegExp","Int32","MinKey","MaxKey","Decimal128","DBRef","Binary","_Buffer","Uint8Array","e","Buffer","regexp","isDate","d","Object","prototype","toString","call","isRegExp","serializeString","buffer","key","value","index","isArray","BSON","BSON_DATA_STRING","numberOfWrittenBytes","write","size","serializeNumber","Math","floor","JS_INT_MIN","JS_INT_MAX","BSON_INT32_MIN","BSON_INT32_MAX","BSON_DATA_INT","BSON_DATA_NUMBER","BSON_DATA_LONG","longVal","fromNumber","lowBits","getLowBits","highBits","getHighBits","serializeUndefined","BSON_DATA_NULL","serializeBoolean","BSON_DATA_BOOLEAN","serializeDate","BSON_DATA_DATE","dateInMilis","getTime","serializeRegExp","BSON_DATA_REGEXP","source","match","Error","global","ignoreCase","multiline","serializeBSONRegExp","pattern","options","split","sort","join","serializeMinMax","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","serializeObjectId","BSON_DATA_OID","id","copy","JSON","stringify","serializeBuffer","BSON_DATA_BINARY","length","BSON_BINARY_SUBTYPE_DEFAULT","serializeObject","checkKeys","depth","serializeFunctions","ignoreUndefined","path","i","push","Array","BSON_DATA_ARRAY","BSON_DATA_OBJECT","endIndex","serializeInto","pop","serializeDecimal128","BSON_DATA_DECIMAL128","bytes","serializeLong","_bsontype","BSON_DATA_TIMESTAMP","serializeInt32","serializeDouble","serializeFunction","BSON_DATA_CODE","functionString","serializeCode","scope","BSON_DATA_CODE_W_SCOPE","startIndex","code","codeSize","totalSize","serializeBinary","data","position","sub_type","SUBTYPE_BYTE_ARRAY","serializeSymbol","BSON_DATA_SYMBOL","serializeDBRef","db","namespace","oid","object","startingIndex","self","toBSON","type","Date","isBuffer","RegExp","iterator","entries","done","entry","next","indexOf","undefined","functionCache","BSON_DATA_UNDEFINED","BSON_BINARY_SUBTYPE_FUNCTION","BSON_BINARY_SUBTYPE_BYTE_ARRAY","BSON_BINARY_SUBTYPE_UUID","BSON_BINARY_SUBTYPE_MD5","BSON_BINARY_SUBTYPE_USER_DEFINED","BSON_INT64_MAX","pow","BSON_INT64_MIN","JS_INT_MAX_LONG","JS_INT_MIN_LONG","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar writeIEEE754 = require('../float_parser').writeIEEE754,\n  readIEEE754 = require('../float_parser').readIEEE754,\n  Long = require('../long').Long,\n  Map = require('../map'),\n  Double = require('../double').Double,\n  Timestamp = require('../timestamp').Timestamp,\n  ObjectID = require('../objectid').ObjectID,\n  Symbol = require('../symbol').Symbol,\n  Code = require('../code').Code,\n  BSONRegExp = require('../regexp').BSONRegExp,\n  Int32 = require('../int_32').Int32,\n  MinKey = require('../min_key').MinKey,\n  MaxKey = require('../max_key').MaxKey,\n  Decimal128 = require('../decimal128'),\n  DBRef = require('../db_ref').DBRef,\n  Binary = require('../binary').Binary;\n\ntry {\n  var _Buffer = Uint8Array;\n} catch(e) {\n  var _Buffer = Buffer;\n}\n\nvar regexp = /\\x00/\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n}\n\nvar isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n}\n\nvar serializeString = function(buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = BSON.BSON_DATA_STRING;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  var size = buffer.write(value, index + 4, 'utf8');\n  // Write the size of the string to buffer\n  buffer[index + 3] = (size + 1 >> 24) & 0xff;\n  buffer[index + 2] = (size + 1 >> 16) & 0xff;\n  buffer[index + 1] = (size + 1 >> 8) & 0xff;\n  buffer[index] = size + 1 & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeNumber = function(buffer, key, value, index, isArray) {\n  // We have an integer value\n  if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = BSON.BSON_DATA_INT;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write the int value\n      buffer[index++] = value & 0xff;\n      buffer[index++] = (value >> 8) & 0xff;\n      buffer[index++] = (value >> 16) & 0xff;\n      buffer[index++] = (value >> 24) & 0xff;\n    } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = BSON.BSON_DATA_NUMBER;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write float\n      writeIEEE754(buffer, value, index, 'little', 52, 8);\n      // Ajust index\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_LONG;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      var longVal = Long.fromNumber(value);\n      var lowBits = longVal.getLowBits();\n      var highBits = longVal.getHighBits();\n      // Encode low bits\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = (lowBits >> 8) & 0xff;\n      buffer[index++] = (lowBits >> 16) & 0xff;\n      buffer[index++] = (lowBits >> 24) & 0xff;\n      // Encode high bits\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = (highBits >> 8) & 0xff;\n      buffer[index++] = (highBits >> 16) & 0xff;\n      buffer[index++] = (highBits >> 24) & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = BSON.BSON_DATA_NUMBER;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Write float\n    writeIEEE754(buffer, value, index, 'little', 52, 8);\n    // Ajust index\n    index = index + 8;\n  }\n\n  return index;\n}\n\nvar serializeUndefined = function(buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = BSON.BSON_DATA_NULL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeBoolean = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n}\n\nvar serializeDate = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_DATE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  var dateInMilis = Long.fromNumber(value.getTime());\n  var lowBits = dateInMilis.getLowBits();\n  var highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nvar serializeRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error(\"value \" + value.source + \" must not contain null bytes\");\n  }\n  // Adjust the index\n  index = index + buffer.write(value.source, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if(value.global) buffer[index++] = 0x73; // s\n  if(value.ignoreCase) buffer[index++] = 0x69; // i\n  if(value.multiline) buffer[index++] = 0x6d; // m\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeBSONRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Adjust the index\n  index = index + buffer.write(value.pattern, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  index = index + buffer.write(value.options.split('').sort().join(''), index, 'utf8');\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeMinMax = function(buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if(value === null) {\n    buffer[index++] = BSON.BSON_DATA_NULL;\n  } else if(value instanceof MinKey) {\n    buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeObjectId = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OID;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if(typeof value.id == 'string') {\n    buffer.write(value.id, index, 'binary')\n  } else if(value.id && value.id.copy){\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new Error('object [' + JSON.stringify(value) + \"] is not a valid ObjectId\");\n  }\n\n  // Ajust index\n  return index + 12;\n}\n\nvar serializeBuffer = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  var size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  value.copy(buffer, index, 0, size);\n  // Adjust the index\n  index = index + size;\n  return index;\n}\n\nvar serializeObject = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {\n  for(var i = 0; i < path.length; i++) {\n    if(path[i] === value) throw new Error('cyclic dependency detected');\n  }\n\n  // Push value to stack\n  path.push(value);\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n  // Pop stack\n  path.pop();\n  // Write size\n  var size = endIndex - index;\n  return endIndex;\n}\n\nvar serializeDecimal128 = function(buffer, key, value, index, isArray) {\n  buffer[index++] = BSON.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n}\n\nvar serializeLong = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = value._bsontype == 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  var lowBits = value.getLowBits();\n  var highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nvar serializeInt32 = function(buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = BSON.BSON_DATA_INT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n}\n\nvar serializeDouble = function(buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = BSON.BSON_DATA_NUMBER;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write float\n  writeIEEE754(buffer, value, index, 'little', 52, 8);\n  // Ajust index\n  index = index + 8;\n  return index;\n}\n\nvar serializeFunction = function(buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = BSON.BSON_DATA_CODE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  var functionString = value.toString();\n  // Write the string\n  var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeCode = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {\n  if(value.scope && typeof value.scope == 'object') {\n    // Write the type\n    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    var startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    var functionString = typeof value.code == 'string' ? value.code : value.code.toString();\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    //\n    // Serialize the scope value\n    var endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined)\n    index = endIndex - 1;\n\n    // Writ the total\n    var totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_CODE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    var functionString = value.code.toString();\n    // Write the string\n    var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n}\n\nvar serializeBinary = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  var data = value.value(true);\n  // Calculate size\n  var size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  data.copy(buffer, index, 0, value.position);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n}\n\nvar serializeSymbol = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  var size = buffer.write(value.value, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  var startIndex = index;\n  var endIndex;\n\n  // Serialize object\n  if(null != value.db) {\n    endIndex = serializeInto(buffer, {\n        '$ref': value.namespace\n      , '$id' : value.oid\n      , '$db' : value.db\n    }, false, index, depth + 1, serializeFunctions);\n  } else {\n    endIndex = serializeInto(buffer, {\n        '$ref': value.namespace\n      , '$id' : value.oid\n    }, false, index, depth + 1, serializeFunctions);\n  }\n\n  // Calculate object size\n  var size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n}\n\nvar serializeInto = function serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n  startingIndex = startingIndex || 0;\n  path = path || [];\n\n  // Push the object to the path\n  path.push(object);\n\n  // Start place to serialize into\n  var index = startingIndex + 4;\n  var self = this;\n\n  // Special case isArray\n  if(Array.isArray(object)) {\n    // Get object keys\n    for(var i = 0; i < object.length; i++) {\n      var key = \"\" + i;\n      var value = object[i];\n\n      // Is there an override value\n      if(value && value.toBSON) {\n        if(typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      }\n\n      var type = typeof value;\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if(type == 'undefined' || value == null) {\n        index = serializeUndefined(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions, true);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      }\n    }\n  } else if(object instanceof Map) {\n    var iterator = object.entries();\n    var done = false;\n\n    while(!done) {\n      // Unpack the next entry\n      var entry = iterator.next();\n      done = entry.done;\n      // Are we done, then skip and terminate\n      if(done) continue;\n\n      // Get the entry values\n      var key = entry.value[0];\n      var value = entry.value[1];\n\n      // Check the type of the value\n      var type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if(key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if(value === undefined && ignoreUndefined == true) {\n      } else if(value === null || value === undefined) {\n        index = serializeUndefined(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if(object.toBSON) {\n      if(typeof object.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n      object = object.toBSON();\n      if(object != null && typeof object != 'object') throw new Error(\"toBSON function did not return an object\");\n    }\n\n    // Iterate over all the keys\n    for(var key in object) {\n      var value = object[key];\n      // Is there an override value\n      if(value && value.toBSON) {\n        if(typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      var type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if(key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if(value === undefined && ignoreUndefined == true) {\n      } else if(value === null || value === undefined) {\n        index = serializeUndefined(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  }\n\n  // Remove the path\n  path.pop();\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  var size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n}\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\nvar functionCache = BSON.functionCache = {};\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type, deprecated\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = serializeInto;\n"]},"metadata":{},"sourceType":"script"}