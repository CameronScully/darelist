{"ast":null,"code":"\"use strict\";\n\nvar writeIEEE754 = require('./float_parser').writeIEEE754,\n    readIEEE754 = require('./float_parser').readIEEE754,\n    Map = require('./map'),\n    Long = require('./long'),\n    Double = require('./double'),\n    Timestamp = require('./timestamp'),\n    ObjectID = require('./objectid'),\n    BSONRegExp = require('./regexp'),\n    Symbol = require('./symbol'),\n    Int32 = require('./int_32'),\n    Code = require('./code'),\n    Decimal128 = require('./decimal128'),\n    MinKey = require('./min_key'),\n    MaxKey = require('./max_key'),\n    DBRef = require('./db_ref'),\n    Binary = require('./binary'); // Parts of the parser\n\n\nvar deserialize = require('./parser/deserializer'),\n    serializer = require('./parser/serializer'),\n    calculateObjectSize = require('./parser/calculate_size');\n/**\n * @ignore\n * @api private\n */\n// Max Size\n\n\nvar MAXSIZE = 1024 * 1024 * 17; // Max Document Buffer size\n\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function () {};\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\n\n\nBSON.prototype.serialize = function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {\n  // Attempt to serialize\n  var serializationIndex = serializer(buffer, object, checkKeys, index || 0, 0, serializeFunctions, ignoreUndefined, []); // Create the final buffer\n\n  var finishedBuffer = new Buffer(serializationIndex); // Copy into the finished buffer\n\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length); // Return the buffer\n\n  return finishedBuffer;\n};\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\n\n\nBSON.prototype.serializeWithBufferAndIndex = function (object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {\n  // Attempt to serialize\n  var serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n  buffer.copy(finalBuffer, startIndex, 0, serializationIndex); // Return the index\n\n  return serializationIndex - 1;\n};\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\n\n\nBSON.prototype.deserialize = function (data, options) {\n  return deserialize(data, options);\n};\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\n\n\nBSON.prototype.calculateObjectSize = function (object, serializeFunctions, ignoreUndefined) {\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\n\n\nBSON.prototype.deserializeStream = function (data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  // if(numberOfDocuments !== documents.length) throw new Error(\"Number of expected results back is less than the number of documents\");\n  options = options != null ? options : {};\n  var index = startIndex; // Loop over all documents\n\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24; // Update options with index\n\n    options['index'] = index; // Parse the document at this point\n\n    documents[docStartIndex + i] = this.deserialize(data, options); // Adjust index by the document size\n\n    index = index + size;\n  } // Return object containing end index of parsing and list of documents\n\n\n  return index;\n};\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\n\n\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63); // JS MAX PRECISE VALUES\n\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\n\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n// Internal long versions\n\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\n\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\n\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\n\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\n\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\n\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\n\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\n\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\n\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\n\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\n\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\n\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\n\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\n\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\n\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\n\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\n\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\n\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\n\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\n\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\n\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\n\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\n\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\n\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\n\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128; // Return BSON\n\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/bson.js"],"names":["writeIEEE754","require","readIEEE754","Map","Long","Double","Timestamp","ObjectID","BSONRegExp","Symbol","Int32","Code","Decimal128","MinKey","MaxKey","DBRef","Binary","deserialize","serializer","calculateObjectSize","MAXSIZE","buffer","Buffer","BSON","prototype","serialize","object","checkKeys","asBuffer","serializeFunctions","index","ignoreUndefined","serializationIndex","finishedBuffer","copy","length","serializeWithBufferAndIndex","finalBuffer","startIndex","data","options","deserializeStream","numberOfDocuments","documents","docStartIndex","i","size","BSON_INT32_MAX","BSON_INT32_MIN","BSON_INT64_MAX","Math","pow","BSON_INT64_MIN","JS_INT_MAX","JS_INT_MIN","JS_INT_MAX_LONG","fromNumber","JS_INT_MIN_LONG","BSON_DATA_NUMBER","BSON_DATA_STRING","BSON_DATA_OBJECT","BSON_DATA_ARRAY","BSON_DATA_BINARY","BSON_DATA_OID","BSON_DATA_BOOLEAN","BSON_DATA_DATE","BSON_DATA_NULL","BSON_DATA_REGEXP","BSON_DATA_CODE","BSON_DATA_SYMBOL","BSON_DATA_CODE_W_SCOPE","BSON_DATA_INT","BSON_DATA_TIMESTAMP","BSON_DATA_LONG","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","BSON_BINARY_SUBTYPE_DEFAULT","BSON_BINARY_SUBTYPE_FUNCTION","BSON_BINARY_SUBTYPE_BYTE_ARRAY","BSON_BINARY_SUBTYPE_UUID","BSON_BINARY_SUBTYPE_MD5","BSON_BINARY_SUBTYPE_USER_DEFINED","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar writeIEEE754 = require('./float_parser').writeIEEE754,\n\treadIEEE754 = require('./float_parser').readIEEE754,\n  Map = require('./map'),\n\tLong = require('./long'),\n  Double = require('./double'),\n  Timestamp = require('./timestamp'),\n  ObjectID = require('./objectid'),\n  BSONRegExp = require('./regexp'),\n  Symbol = require('./symbol'),\n\tInt32 = require('./int_32'),\n  Code = require('./code'),\n\tDecimal128 = require('./decimal128'),\n  MinKey = require('./min_key'),\n  MaxKey = require('./max_key'),\n  DBRef = require('./db_ref'),\n  Binary = require('./binary');\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n\tserializer = require('./parser/serializer'),\n\tcalculateObjectSize = require('./parser/calculate_size');\n\n/**\n * @ignore\n * @api private\n */\n// Max Size\nvar MAXSIZE = (1024*1024*17);\n// Max Document Buffer size\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function() {\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, index || 0, 0, serializeFunctions, ignoreUndefined, []);\n\t// Create the final buffer\n\tvar finishedBuffer = new Buffer(serializationIndex);\n\t// Copy into the finished buffer\n\tbuffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n\t// Return the buffer\n\treturn finishedBuffer;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n\tbuffer.copy(finalBuffer, startIndex, 0, serializationIndex);\n\t// Return the index\n\treturn serializationIndex - 1;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(data, options) {\n  return deserialize(data, options);\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, serializeFunctions, ignoreUndefined) {\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  // if(numberOfDocuments !== documents.length) throw new Error(\"Number of expected results back is less than the number of documents\");\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for(var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;\n"]},"metadata":{},"sourceType":"script"}