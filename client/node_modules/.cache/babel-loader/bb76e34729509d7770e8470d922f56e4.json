{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar readPref = require('./drivers').ReadPreference;\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar VirtualType = require('./virtualtype');\n\nvar utils = require('./utils');\n\nvar MongooseTypes;\n\nvar Kareem = require('kareem');\n\nvar each = require('async/each');\n\nvar SchemaType = require('./schematype');\n\nvar IS_KAREEM_HOOK = {\n  count: true,\n  find: true,\n  findOne: true,\n  findOneAndUpdate: true,\n  findOneAndRemove: true,\n  insertMany: true,\n  update: true\n};\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     var child = new Schema({ name: String });\n *     var schema = new Schema({ name: String, age: Number, children: [child] });\n *     var Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [emitIndexErrors](/docs/guide.html#emitIndexErrors): bool - defaults to false.\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - `minimize`: bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [safe](/docs/guide.html#safe): bool - defaults to true.\n * - [shardKey](/docs/guide.html#shardKey): bool - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string - defaults to \"__v\"\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object} definition\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.statics = {};\n  this.tree = {};\n  this._requiredpaths = undefined;\n  this.discriminatorMapping = undefined;\n  this._indexedpaths = undefined;\n  this.query = {};\n  this.childSchemas = [];\n  this.s = {\n    hooks: new Kareem(),\n    kareemHooks: IS_KAREEM_HOOK\n  };\n  this.options = this.defaultOptions(options); // build paths\n\n  if (obj) {\n    this.add(obj);\n  } // check if _id's value is a subdocument (gh-2276)\n\n\n  var _idSubDoc = obj && obj._id && utils.isObject(obj._id); // ensure the documents get an auto _id unless disabled\n\n\n  var auto_id = !this.paths['_id'] && !this.options.noId && this.options._id && !_idSubDoc;\n\n  if (auto_id) {\n    obj = {\n      _id: {\n        auto: true\n      }\n    };\n    obj._id[this.options.typeKey] = Schema.ObjectId;\n    this.add(obj);\n  } // ensure the documents receive an id getter unless disabled\n\n\n  var autoid = !this.paths['id'] && !this.options.noVirtualId && this.options.id;\n\n  if (autoid) {\n    this.virtual('id').get(idGetter);\n  }\n\n  for (var i = 0; i < this._defaultMiddleware.length; ++i) {\n    var m = this._defaultMiddleware[i];\n    this[m.kind](m.hook, !!m.isAsync, m.fn);\n  }\n\n  if (this.options.timestamps) {\n    this.setupTimestamp(this.options.timestamps);\n  }\n}\n/*!\n * Returns this documents _id cast to a string.\n */\n\n\nfunction idGetter() {\n  if (this.$__._id) {\n    return this.$__._id;\n  }\n\n  this.$__._id = this._id == null ? null : String(this._id);\n  return this.$__._id;\n}\n/*!\n * Inherit from EventEmitter.\n */\n\n\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n/**\n * Default middleware attached to a schema. Cannot be changed.\n *\n * This field is used to make sure discriminators don't get multiple copies of\n * built-in middleware. Declared as a constant because changing this at runtime\n * may lead to instability with Model.prototype.discriminator().\n *\n * @api private\n * @property _defaultMiddleware\n */\n\nObject.defineProperty(Schema.prototype, '_defaultMiddleware', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: [{\n    kind: 'pre',\n    hook: 'save',\n    fn: function (next, options) {\n      var _this = this; // Nested docs have their own presave\n\n\n      if (this.ownerDocument) {\n        return next();\n      }\n\n      var hasValidateBeforeSaveOption = options && typeof options === 'object' && 'validateBeforeSave' in options;\n      var shouldValidate;\n\n      if (hasValidateBeforeSaveOption) {\n        shouldValidate = !!options.validateBeforeSave;\n      } else {\n        shouldValidate = this.schema.options.validateBeforeSave;\n      } // Validate\n\n\n      if (shouldValidate) {\n        // HACK: use $__original_validate to avoid promises so bluebird doesn't\n        // complain\n        if (this.$__original_validate) {\n          this.$__original_validate({\n            __noPromise: true\n          }, function (error) {\n            return _this.schema.s.hooks.execPost('save:error', _this, [_this], {\n              error: error\n            }, function (error) {\n              next(error);\n            });\n          });\n        } else {\n          this.validate({\n            __noPromise: true\n          }, function (error) {\n            return _this.schema.s.hooks.execPost('save:error', _this, [_this], {\n              error: error\n            }, function (error) {\n              next(error);\n            });\n          });\n        }\n      } else {\n        next();\n      }\n    }\n  }, {\n    kind: 'pre',\n    hook: 'save',\n    isAsync: true,\n    fn: function (next, done) {\n      var _this = this;\n\n      var subdocs = this.$__getAllSubdocs();\n\n      if (!subdocs.length || this.$__preSavingFromParent) {\n        done();\n        next();\n        return;\n      }\n\n      each(subdocs, function (subdoc, cb) {\n        subdoc.$__preSavingFromParent = true;\n        subdoc.save(function (err) {\n          cb(err);\n        });\n      }, function (error) {\n        for (var i = 0; i < subdocs.length; ++i) {\n          delete subdocs[i].$__preSavingFromParent;\n        }\n\n        if (error) {\n          return _this.schema.s.hooks.execPost('save:error', _this, [_this], {\n            error: error\n          }, function (error) {\n            done(error);\n          });\n        }\n\n        next();\n        done();\n      });\n    }\n  }, {\n    kind: 'pre',\n    hook: 'validate',\n    isAsync: true,\n    fn: function (next, done) {\n      // Hack to ensure that we always wrap validate() in a promise\n      next();\n      done();\n    }\n  }, {\n    kind: 'pre',\n    hook: 'remove',\n    isAsync: true,\n    fn: function (next, done) {\n      if (this.ownerDocument) {\n        done();\n        next();\n        return;\n      }\n\n      var subdocs = this.$__getAllSubdocs();\n\n      if (!subdocs.length || this.$__preSavingFromParent) {\n        done();\n        next();\n        return;\n      }\n\n      each(subdocs, function (subdoc, cb) {\n        subdoc.remove({\n          noop: true\n        }, function (err) {\n          cb(err);\n        });\n      }, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n\n        next();\n        done();\n      });\n    }\n  }]\n});\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     var schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n */\n\nSchema.prototype.obj;\n/**\n * Schema as flat paths\n *\n * ####Example:\n *     {\n *         '_id'        : SchemaType,\n *       , 'nested.key' : SchemaType,\n *     }\n *\n * @api private\n * @property paths\n */\n\nSchema.prototype.paths;\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n */\n\nSchema.prototype.tree;\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function (options) {\n  if (options && options.safe === false) {\n    options.safe = {\n      w: 0\n    };\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  options = utils.options({\n    strict: true,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false,\n    // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false,\n    // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    retainKeyOrder: false\n  }, options);\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  return options;\n};\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     var ToySchema = new Schema;\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n * @param {Object} obj\n * @param {String} prefix\n * @api public\n */\n\n\nSchema.prototype.add = function add(obj, prefix) {\n  prefix = prefix || '';\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + prefix + key + '`');\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + prefix + key + '`');\n    }\n\n    if (utils.isObject(obj[key]) && (!obj[key].constructor || utils.getFunctionName(obj[key].constructor) === 'Object') && (!obj[key][this.options.typeKey] || this.options.typeKey === 'type' && obj[key].type.type)) {\n      if (Object.keys(obj[key]).length) {\n        // nested object { last: { name: String }}\n        this.nested[prefix + key] = true;\n        this.add(obj[key], prefix + key + '.');\n      } else {\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n\n        this.path(prefix + key, obj[key]); // mixed type\n      }\n    } else {\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n\n      this.path(prefix + key, obj[key]);\n    }\n  }\n};\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations b/c they conflict with mongoose functionality. Using these key name will throw an error.\n *\n *      on, emit, _events, db, get, set, init, isNew, errors, schema, options, modelName, collection, _pres, _posts, toObject\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      var schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\n\nSchema.reserved = Object.create(null);\nvar reserved = Schema.reserved; // Core object\n\nreserved['prototype'] = // EventEmitter\nreserved.emit = reserved.on = reserved.once = reserved.listeners = reserved.removeListener = // document properties and functions\nreserved.collection = reserved.db = reserved.errors = reserved.init = reserved.isModified = reserved.isNew = reserved.get = reserved.modelName = reserved.save = reserved.schema = reserved.set = reserved.toObject = reserved.validate = // hooks.js\nreserved._pres = reserved._posts = 1;\n/*!\n * Document keys to print warnings for\n */\n\nvar warnings = {};\nwarnings.increment = '`increment` should not be used as a schema path name ' + 'unless you have disabled versioning.';\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  if (obj === undefined) {\n    if (this.paths[path]) {\n      return this.paths[path];\n    }\n\n    if (this.subpaths[path]) {\n      return this.subpaths[path];\n    }\n\n    if (this.singleNestedPaths[path]) {\n      return this.singleNestedPaths[path];\n    } // subpaths?\n\n\n    return /\\.\\d+\\.?.*$/.test(path) ? getPositionalPath(this, path) : undefined;\n  } // some path names conflict with document methods\n\n\n  if (reserved[path]) {\n    throw new Error('`' + path + '` may not be used as a schema pathname');\n  }\n\n  if (warnings[path]) {\n    console.log('WARN: ' + warnings[path]);\n  } // update the tree\n\n\n  var subpaths = path.split(/\\./),\n      last = subpaths.pop(),\n      branch = this.tree;\n  subpaths.forEach(function (sub, i) {\n    if (!branch[sub]) {\n      branch[sub] = {};\n    }\n\n    if (typeof branch[sub] !== 'object') {\n      var msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + subpaths.slice(0, i).concat([sub]).join('.') + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n\n    branch = branch[sub];\n  });\n  branch[last] = utils.clone(obj);\n  this.paths[path] = Schema.interpretAsType(path, obj, this.options);\n\n  if (this.paths[path].$isSingleNested) {\n    for (var key in this.paths[path].schema.paths) {\n      this.singleNestedPaths[path + '.' + key] = this.paths[path].schema.paths[key];\n    }\n\n    for (key in this.paths[path].schema.singleNestedPaths) {\n      this.singleNestedPaths[path + '.' + key] = this.paths[path].schema.singleNestedPaths[key];\n    }\n\n    this.childSchemas.push(this.paths[path].schema);\n  } else if (this.paths[path].$isMongooseDocumentArray) {\n    this.childSchemas.push(this.paths[path].schema);\n  }\n\n  return this;\n};\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\n\nSchema.interpretAsType = function (path, obj, options) {\n  if (obj.constructor) {\n    var constructorName = utils.getFunctionName(obj.constructor);\n\n    if (constructorName !== 'Object') {\n      var oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  } // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n\n\n  var type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n\n  if (utils.getFunctionName(type.constructor) === 'Object' || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || Array === type || type === 'array') {\n    // if it was specified through { type } look for `cast`\n    var cast = Array === type || type === 'array' ? obj.cast : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, Schema.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || options.typeKey === 'type' && cast.type.type) && utils.getFunctionName(cast.constructor) === 'Object') {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        var childSchemaOptions = {\n          minimize: options.minimize\n        };\n\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n\n        var childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type);\n\n      if (!(name in MongooseTypes)) {\n        throw new TypeError('Undefined type `' + name + '` at array `' + path + '`');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  var name;\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else {\n    name = typeof type === 'string' ? type // If not string, `type` is a function. Outside of IE, function.name\n    // gives you the function name. In IE, you need to compute it\n    : type.schemaName || utils.getFunctionName(type);\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n\n  if (undefined == MongooseTypes[name]) {\n    throw new TypeError('Undefined type `' + name + '` at `' + path + '`\\n  Did you try nesting Schemas? ' + 'You can only nest using refs or arrays.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and schemaType as arguments on each iteration.\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\n\nSchema.prototype.eachPath = function (fn) {\n  var keys = Object.keys(this.paths),\n      len = keys.length;\n\n  for (var i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  var paths = Object.keys(this.paths),\n      i = paths.length,\n      ret = [];\n\n  while (i--) {\n    var path = paths[i];\n\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\n\nSchema.prototype.pathType = function (path) {\n  if (path in this.paths) {\n    return 'real';\n  }\n\n  if (path in this.virtuals) {\n    return 'virtual';\n  }\n\n  if (path in this.nested) {\n    return 'nested';\n  }\n\n  if (path in this.subpaths) {\n    return 'real';\n  }\n\n  if (path in this.singleNestedPaths) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n\n  return 'adhocOrUndefined';\n};\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\n\nSchema.prototype.hasMixedParent = function (path) {\n  var subpaths = path.split(/\\./g);\n  path = '';\n\n  for (var i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n\n    if (path in this.paths && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\n\n\nSchema.prototype.setupTimestamp = function (timestamps) {\n  if (timestamps) {\n    var createdAt = timestamps.createdAt || 'createdAt';\n    var updatedAt = timestamps.updatedAt || 'updatedAt';\n    var schemaAdditions = {};\n    schemaAdditions[updatedAt] = Date;\n\n    if (!this.paths[createdAt]) {\n      schemaAdditions[createdAt] = Date;\n    }\n\n    this.add(schemaAdditions);\n    this.pre('save', function (next) {\n      var defaultTimestamp = new Date();\n      var auto_id = this._id && this._id.auto;\n\n      if (!this[createdAt] && this.isSelected(createdAt)) {\n        this[createdAt] = auto_id ? this._id.getTimestamp() : defaultTimestamp;\n      }\n\n      if (this.isNew || this.isModified()) {\n        this[updatedAt] = this.isNew ? this[createdAt] : defaultTimestamp;\n      }\n\n      next();\n    });\n\n    var genUpdates = function (overwrite) {\n      var now = new Date();\n      var updates = {};\n\n      if (overwrite) {\n        updates[updatedAt] = now;\n        updates[createdAt] = now;\n        return updates;\n      }\n\n      updates = {\n        $set: {},\n        $setOnInsert: {}\n      };\n      updates.$set[updatedAt] = now;\n      updates.$setOnInsert[createdAt] = now;\n      return updates;\n    };\n\n    this.methods.initializeTimestamps = function () {\n      if (!this[createdAt]) {\n        this[createdAt] = new Date();\n      }\n\n      if (!this[updatedAt]) {\n        this[updatedAt] = new Date();\n      }\n\n      return this;\n    };\n\n    this.pre('findOneAndUpdate', function (next) {\n      var overwrite = this.options.overwrite;\n      this.findOneAndUpdate({}, genUpdates(overwrite), {\n        overwrite: overwrite\n      });\n      applyTimestampsToChildren(this);\n      next();\n    });\n    this.pre('update', function (next) {\n      var overwrite = this.options.overwrite;\n      this.update({}, genUpdates(overwrite), {\n        overwrite: overwrite\n      });\n      applyTimestampsToChildren(this);\n      next();\n    });\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction applyTimestampsToChildren(query) {\n  var now = new Date();\n  var update = query.getUpdate();\n  var keys = Object.keys(update);\n  var key;\n  var schema = query.model.schema;\n  var len;\n  var createdAt;\n  var updatedAt;\n  var timestamps;\n  var path;\n  var hasDollarKey = keys.length && keys[0].charAt(0) === '$';\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        var $path = schema.path(key);\n\n        if (update.$push[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = timestamps.createdAt || 'createdAt';\n          updatedAt = timestamps.updatedAt || 'updatedAt';\n          update.$push[key][updatedAt] = now;\n          update.$push[key][createdAt] = now;\n        }\n      }\n    }\n\n    if (update.$set) {\n      for (key in update.$set) {\n        path = schema.path(key);\n\n        if (!path) {\n          continue;\n        }\n\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          len = update.$set[key].length;\n          timestamps = schema.path(key).schema.options.timestamps;\n\n          if (timestamps) {\n            createdAt = timestamps.createdAt || 'createdAt';\n            updatedAt = timestamps.updatedAt || 'updatedAt';\n\n            for (var i = 0; i < len; ++i) {\n              update.$set[key][i][updatedAt] = now;\n              update.$set[key][i][createdAt] = now;\n            }\n          }\n        } else if (update.$set[key] && path.$isSingleNested) {\n          timestamps = schema.path(key).schema.options.timestamps;\n\n          if (timestamps) {\n            createdAt = timestamps.createdAt || 'createdAt';\n            updatedAt = timestamps.updatedAt || 'updatedAt';\n            update.$set[key][updatedAt] = now;\n            update.$set[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction getPositionalPathType(self, path) {\n  var subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n\n  if (subpaths.length < 2) {\n    return self.paths[subpaths[0]];\n  }\n\n  var val = self.path(subpaths[0]);\n  var isNested = false;\n\n  if (!val) {\n    return val;\n  }\n\n  var last = subpaths.length - 1,\n      subpath,\n      i = 1;\n\n  for (; i < subpaths.length; ++i) {\n    isNested = false;\n    subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        var oldVal = val;\n        val = new SchemaType(subpath);\n\n        val.cast = function (value, doc, init) {\n          return oldVal.cast(value, doc, init)[0];\n        };\n\n        val.caster = oldVal.caster;\n        val.schema = oldVal.schema;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n\n      break;\n    } // ignore if its just a position segment: path.0.subpath\n\n\n    if (!/\\D/.test(subpath)) {\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    var type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n\n  if (val) {\n    return 'real';\n  }\n\n  if (isNested) {\n    return 'nested';\n  }\n\n  return 'adhocOrUndefined';\n}\n/*!\n * ignore\n */\n\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n/**\n * Adds a method call to the queue.\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n/**\n * Defines a pre hook for the document.\n *\n * ####Example\n *\n *     var toySchema = new Schema(..);\n *\n *     toySchema.pre('save', function (next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     })\n *\n *     toySchema.pre('validate', function (next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     })\n *\n * @param {String} method\n * @param {Function} callback\n * @see hooks.js https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3\n * @api public\n */\n\n\nSchema.prototype.pre = function () {\n  var name = arguments[0];\n\n  if (IS_KAREEM_HOOK[name]) {\n    this.s.hooks.pre.apply(this.s.hooks, arguments);\n    return this;\n  }\n\n  return this.queue('pre', arguments);\n};\n/**\n * Defines a post hook for the document\n *\n *     var schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     shema.post('find', function(docs) {\n *       console.log('this fired after you run a find query');\n *     });\n *\n *     var Model = mongoose.model('Model', schema);\n *\n *     var m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String} method name of the method to hook\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see hooks.js https://www.npmjs.com/package/hooks-fixed\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\n\nSchema.prototype.post = function (method, fn) {\n  if (IS_KAREEM_HOOK[method]) {\n    this.s.hooks.post.apply(this.s.hooks, arguments);\n    return this;\n  } // assuming that all callbacks with arity < 2 are synchronous post hooks\n\n\n  if (fn.length < 2) {\n    return this.queue('on', [arguments[0], function (doc) {\n      return fn.call(doc, doc);\n    }]);\n  }\n\n  if (fn.length === 3) {\n    this.s.hooks.post(method + ':error', fn);\n    return this;\n  }\n\n  return this.queue('post', [arguments[0], function (next) {\n    // wrap original function so that the callback goes last,\n    // for compatibility with old code that is using synchronous post hooks\n    var _this = this;\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    fn.call(this, this, function (err) {\n      return next.apply(_this, [err].concat(args));\n    });\n  }]);\n};\n/**\n * Registers a plugin for this schema.\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\n\nSchema.prototype.plugin = function (fn, opts) {\n  fn(this, opts);\n  return this;\n};\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     var Kitty = mongoose.model('Kitty', schema);\n *\n *     var fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\n\nSchema.prototype.method = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.methods[i] = name[i];\n    }\n  } else {\n    this.methods[name] = fn;\n  }\n\n  return this;\n};\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = new Schema(..);\n *     schema.static('findByName', function (name, callback) {\n *       return this.find({ name: name }, callback);\n *     });\n *\n *     var Drink = mongoose.model('Drink', schema);\n *     Drink.findByName('sanpellegrino', function (err, drinks) {\n *       //\n *     });\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n */\n\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n\n  return this;\n};\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\n\nSchema.prototype.index = function (fields, options) {\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n\n  return this;\n};\n/**\n * Sets/gets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\n\nSchema.prototype.set = function (key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      break;\n\n    case 'safe':\n      this.options[key] = value === false ? {\n        w: 0\n      } : value;\n      break;\n\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      break;\n\n    default:\n      this.options[key] = value;\n  }\n\n  return this;\n};\n/**\n * Gets a schema option.\n *\n * @param {String} key option name\n * @api public\n */\n\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\n/**\n * The allowed index types\n *\n * @static indexTypes\n * @receiver Schema\n * @api public\n */\n\n\nvar indexTypes = '2d 2dsphere hashed text'.split(' ');\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n/**\n * Compiles indexes from fields and schema-level indexes\n *\n * @api public\n */\n\nSchema.prototype.indexes = function () {\n  'use strict';\n\n  var indexes = [];\n  var seenPrefix = {};\n\n  var collectIndexes = function (schema, prefix) {\n    if (seenPrefix[prefix]) {\n      return;\n    }\n\n    seenPrefix[prefix] = true;\n    prefix = prefix || '';\n    var key, path, index, field, isObject, options, type;\n    var keys = Object.keys(schema.paths);\n\n    for (var i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      path = schema.paths[key];\n\n      if (path instanceof MongooseTypes.DocumentArray || path.$isSingleNested) {\n        collectIndexes(path.schema, key + '.');\n      } else {\n        index = path._index;\n\n        if (index !== false && index !== null && index !== undefined) {\n          field = {};\n          isObject = utils.isObject(index);\n          options = isObject ? index : {};\n          type = typeof index === 'string' ? index : isObject ? index.type : false;\n\n          if (type && ~Schema.indexTypes.indexOf(type)) {\n            field[prefix + key] = type;\n          } else if (options.text) {\n            field[prefix + key] = 'text';\n            delete options.text;\n          } else {\n            field[prefix + key] = 1;\n          }\n\n          delete options.type;\n\n          if (!('background' in options)) {\n            options.background = true;\n          }\n\n          indexes.push([field, options]);\n        }\n      }\n    }\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function (index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n\n      indexes = indexes.concat(schema._indexes);\n    }\n  };\n\n  collectIndexes(this);\n  return indexes;\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    var subindexes = schema._indexes,\n        len = subindexes.length,\n        indexObj,\n        newindex,\n        klen,\n        keys,\n        key,\n        i = 0,\n        j;\n\n    for (i = 0; i < len; ++i) {\n      indexObj = subindexes[i][0];\n      keys = Object.keys(indexObj);\n      klen = keys.length;\n      newindex = {}; // use forward iteration, order matters\n\n      for (j = 0; j < klen; ++j) {\n        key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      indexes.push([newindex, subindexes[i][1]]);\n    }\n  }\n};\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtual = function (name, options) {\n  if (options && options.ref) {\n    if (!options.localField) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (!options.foreignField) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function (next, obj) {\n      if (name in obj) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne) {\n          this.$$populatedVirtuals[name] = Array.isArray(obj[name]) ? obj[name][0] : obj[name];\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(obj[name]) ? obj[name] : obj[name] == null ? [] : [obj[name]];\n        }\n\n        delete obj[name];\n      }\n\n      if (this.ownerDocument) {\n        next();\n        return obj;\n      } else {\n        next();\n      }\n    });\n    var virtual = this.virtual(name);\n    virtual.options = options;\n    return virtual.get(function () {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n\n      if (name in this.$$populatedVirtuals) {\n        return this.$$populatedVirtuals[name];\n      }\n\n      return null;\n    }).set(function (v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n\n      this.$$populatedVirtuals[name] = v;\n    });\n  }\n\n  var virtuals = this.virtuals;\n  var parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree);\n  return virtuals[name];\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getVirtual = function (name) {\n  return _getVirtual(this, name);\n};\n/*!\n * ignore\n */\n\n\nfunction _getVirtual(schema, name) {\n  var parts = name.split('.');\n  var cur = '';\n  var nestedSchemaPath = '';\n\n  for (var i = 0; i < parts.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + parts[i];\n\n    if (schema.virtuals[cur]) {\n      if (i === parts.length - 1) {\n        schema.virtuals[cur].$nestedSchemaPath = nestedSchemaPath;\n        return schema.virtuals[cur];\n      }\n\n      continue;\n    } else if (schema.paths[cur] && schema.paths[cur].schema) {\n      schema = schema.paths[cur].schema;\n      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;\n      cur = '';\n    } else {\n      return null;\n    }\n  }\n}\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals[name];\n};\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * @param {String|Array} path\n *\n * @api public\n */\n\n\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name)) {\n        delete this.paths[name];\n        var pieces = name.split('.');\n        var last = pieces.pop();\n        var branch = this.tree;\n\n        for (var i = 0; i < pieces.length; ++i) {\n          branch = branch[pieces[i]];\n        }\n\n        delete branch[last];\n      }\n    }, this);\n  }\n};\n/**\n * Loads an ES6 class into a schema. Maps setters + getters, static methods, and instance methods to schema virtuals, statics, and methods.\n *\n * @param {Function} model\n */\n\n\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  if (model === Object.prototype || model === Function.prototype) {\n    return this;\n  } // Add static methods\n\n\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype)$/)) {\n        return;\n      }\n\n      var method = Object.getOwnPropertyDescriptor(model, name);\n      if (typeof method.value === 'function') this.static(name, method.value);\n    }, this);\n  } // Add methods and virtuals\n\n\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n\n    var method = Object.getOwnPropertyDescriptor(model.prototype, name);\n\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n\n    if (typeof method.get === 'function') {\n      this.virtual(name).get(method.get);\n    }\n\n    if (typeof method.set === 'function') {\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this.loadClass(Object.getPrototypeOf(model));\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getSchema = function (path) {\n  var _this = this;\n\n  var pathschema = _this.path(path);\n\n  var resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$') {\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            } // this is the last path of the selector\n\n\n            return search(parts.slice(p), foundschema.schema);\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  } // look for arrays\n\n\n  return search(path.split('.'), _this);\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getPathType = function (path) {\n  var _this = this;\n\n  var pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$') {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              } // comments.$.comments.$.title\n\n\n              return search(parts.slice(p + 1), foundschema.schema);\n            } // this is the last path of the selector\n\n\n            return search(parts.slice(p), foundschema.schema);\n          }\n\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  } // look for arrays\n\n\n  return search(path.split('.'), _this);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = Schema; // require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](#schema-string-js)\n * - [Number](#schema-number-js)\n * - [Boolean](#schema-boolean-js) | Bool\n * - [Array](#schema-array-js)\n * - [Buffer](#schema-buffer-js)\n * - [Date](#schema-date-js)\n * - [ObjectId](#schema-objectid-js) | Oid\n * - [Mixed](#schema-mixed-js)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     var Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/schema.js"],"names":["readPref","require","ReadPreference","EventEmitter","VirtualType","utils","MongooseTypes","Kareem","each","SchemaType","IS_KAREEM_HOOK","count","find","findOne","findOneAndUpdate","findOneAndRemove","insertMany","update","Schema","obj","options","paths","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","methods","statics","tree","_requiredpaths","undefined","discriminatorMapping","_indexedpaths","query","childSchemas","s","hooks","kareemHooks","defaultOptions","add","_idSubDoc","_id","isObject","auto_id","noId","auto","typeKey","ObjectId","autoid","noVirtualId","id","virtual","get","idGetter","i","_defaultMiddleware","length","m","kind","hook","isAsync","fn","timestamps","setupTimestamp","$__","String","prototype","Object","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","value","next","_this","ownerDocument","hasValidateBeforeSaveOption","shouldValidate","validateBeforeSave","schema","$__original_validate","__noPromise","error","execPost","validate","done","subdocs","$__getAllSubdocs","$__preSavingFromParent","subdoc","cb","save","err","remove","noop","safe","w","versionKey","strict","bufferCommands","capped","discriminatorKey","minimize","autoIndex","shardKey","read","retainKeyOrder","prefix","keys","key","TypeError","Array","isArray","getFunctionName","type","substr","path","reserved","emit","on","once","listeners","removeListener","collection","db","errors","init","isModified","isNew","modelName","set","toObject","_pres","_posts","warnings","increment","test","getPositionalPath","Error","console","log","split","last","pop","branch","forEach","sub","msg","slice","concat","join","name","clone","interpretAsType","$isSingleNested","push","$isMongooseDocumentArray","constructorName","oldObj","Mixed","cast","DocumentArray","charAt","toUpperCase","substring","childSchemaOptions","childSchema","$implicitlyCreated","schemaName","Embedded","Buffer","isBuffer","eachPath","len","requiredPaths","invalidate","ret","isRequired","indexedPaths","indexes","pathType","getPositionalPathType","hasMixedParent","createdAt","updatedAt","schemaAdditions","Date","pre","defaultTimestamp","isSelected","getTimestamp","genUpdates","overwrite","now","updates","$set","$setOnInsert","initializeTimestamps","applyTimestampsToChildren","getUpdate","model","hasDollarKey","$push","$path","self","filter","Boolean","val","isNested","subpath","oldVal","doc","caster","queue","args","arguments","apply","post","method","call","plugin","opts","static","index","fields","expires","_tags","indexTypes","seenPrefix","collectIndexes","field","_index","indexOf","text","background","fixSubIndexPaths","subindexes","indexObj","newindex","klen","j","ref","localField","foreignField","$$populatedVirtuals","justOne","v","parts","reduce","mem","part","_getVirtual","cur","nestedSchemaPath","$nestedSchemaPath","virtualpath","pieces","loadClass","virtualsOnly","Function","getOwnPropertyNames","match","getOwnPropertyDescriptor","getPrototypeOf","_getSchema","pathschema","resultPath","$fullPath","search","p","foundschema","trypath","_getPathType","module","exports","Types"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar readPref = require('./drivers').ReadPreference;\nvar EventEmitter = require('events').EventEmitter;\nvar VirtualType = require('./virtualtype');\nvar utils = require('./utils');\nvar MongooseTypes;\nvar Kareem = require('kareem');\nvar each = require('async/each');\nvar SchemaType = require('./schematype');\n\nvar IS_KAREEM_HOOK = {\n  count: true,\n  find: true,\n  findOne: true,\n  findOneAndUpdate: true,\n  findOneAndRemove: true,\n  insertMany: true,\n  update: true\n};\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     var child = new Schema({ name: String });\n *     var schema = new Schema({ name: String, age: Number, children: [child] });\n *     var Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [emitIndexErrors](/docs/guide.html#emitIndexErrors): bool - defaults to false.\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - `minimize`: bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [safe](/docs/guide.html#safe): bool - defaults to true.\n * - [shardKey](/docs/guide.html#shardKey): bool - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string - defaults to \"__v\"\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object} definition\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.statics = {};\n  this.tree = {};\n  this._requiredpaths = undefined;\n  this.discriminatorMapping = undefined;\n  this._indexedpaths = undefined;\n  this.query = {};\n  this.childSchemas = [];\n\n  this.s = {\n    hooks: new Kareem(),\n    kareemHooks: IS_KAREEM_HOOK\n  };\n\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  var _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  var auto_id = !this.paths['_id'] &&\n      (!this.options.noId && this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    obj = {_id: {auto: true}};\n    obj._id[this.options.typeKey] = Schema.ObjectId;\n    this.add(obj);\n  }\n\n  // ensure the documents receive an id getter unless disabled\n  var autoid = !this.paths['id'] &&\n      (!this.options.noVirtualId && this.options.id);\n  if (autoid) {\n    this.virtual('id').get(idGetter);\n  }\n\n  for (var i = 0; i < this._defaultMiddleware.length; ++i) {\n    var m = this._defaultMiddleware[i];\n    this[m.kind](m.hook, !!m.isAsync, m.fn);\n  }\n\n  if (this.options.timestamps) {\n    this.setupTimestamp(this.options.timestamps);\n  }\n}\n\n/*!\n * Returns this documents _id cast to a string.\n */\n\nfunction idGetter() {\n  if (this.$__._id) {\n    return this.$__._id;\n  }\n\n  this.$__._id = this._id == null\n      ? null\n      : String(this._id);\n  return this.$__._id;\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/**\n * Default middleware attached to a schema. Cannot be changed.\n *\n * This field is used to make sure discriminators don't get multiple copies of\n * built-in middleware. Declared as a constant because changing this at runtime\n * may lead to instability with Model.prototype.discriminator().\n *\n * @api private\n * @property _defaultMiddleware\n */\nObject.defineProperty(Schema.prototype, '_defaultMiddleware', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: [\n    {\n      kind: 'pre',\n      hook: 'save',\n      fn: function(next, options) {\n        var _this = this;\n        // Nested docs have their own presave\n        if (this.ownerDocument) {\n          return next();\n        }\n\n        var hasValidateBeforeSaveOption = options &&\n            (typeof options === 'object') &&\n            ('validateBeforeSave' in options);\n\n        var shouldValidate;\n        if (hasValidateBeforeSaveOption) {\n          shouldValidate = !!options.validateBeforeSave;\n        } else {\n          shouldValidate = this.schema.options.validateBeforeSave;\n        }\n\n        // Validate\n        if (shouldValidate) {\n          // HACK: use $__original_validate to avoid promises so bluebird doesn't\n          // complain\n          if (this.$__original_validate) {\n            this.$__original_validate({__noPromise: true}, function(error) {\n              return _this.schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n                next(error);\n              });\n            });\n          } else {\n            this.validate({__noPromise: true}, function(error) {\n              return _this.schema.s.hooks.execPost('save:error', _this, [ _this], { error: error }, function(error) {\n                next(error);\n              });\n            });\n          }\n        } else {\n          next();\n        }\n      }\n    },\n    {\n      kind: 'pre',\n      hook: 'save',\n      isAsync: true,\n      fn: function(next, done) {\n        var _this = this;\n        var subdocs = this.$__getAllSubdocs();\n\n        if (!subdocs.length || this.$__preSavingFromParent) {\n          done();\n          next();\n          return;\n        }\n\n        each(subdocs, function(subdoc, cb) {\n          subdoc.$__preSavingFromParent = true;\n          subdoc.save(function(err) {\n            cb(err);\n          });\n        }, function(error) {\n          for (var i = 0; i < subdocs.length; ++i) {\n            delete subdocs[i].$__preSavingFromParent;\n          }\n          if (error) {\n            return _this.schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n              done(error);\n            });\n          }\n          next();\n          done();\n        });\n      }\n    },\n    {\n      kind: 'pre',\n      hook: 'validate',\n      isAsync: true,\n      fn: function(next, done) {\n        // Hack to ensure that we always wrap validate() in a promise\n        next();\n        done();\n      }\n    },\n    {\n      kind: 'pre',\n      hook: 'remove',\n      isAsync: true,\n      fn: function(next, done) {\n        if (this.ownerDocument) {\n          done();\n          next();\n          return;\n        }\n\n        var subdocs = this.$__getAllSubdocs();\n\n        if (!subdocs.length || this.$__preSavingFromParent) {\n          done();\n          next();\n          return;\n        }\n\n        each(subdocs, function(subdoc, cb) {\n          subdoc.remove({ noop: true }, function(err) {\n            cb(err);\n          });\n        }, function(error) {\n          if (error) {\n            done(error);\n            return;\n          }\n          next();\n          done();\n        });\n      }\n    }\n  ]\n});\n\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     var schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n */\n\nSchema.prototype.obj;\n\n/**\n * Schema as flat paths\n *\n * ####Example:\n *     {\n *         '_id'        : SchemaType,\n *       , 'nested.key' : SchemaType,\n *     }\n *\n * @api private\n * @property paths\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  if (options && options.safe === false) {\n    options.safe = {w: 0};\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  options = utils.options({\n    strict: true,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false, // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false, // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    retainKeyOrder: false\n  }, options);\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     var ToySchema = new Schema;\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n * @param {Object} obj\n * @param {String} prefix\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  prefix = prefix || '';\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + prefix + key + '`');\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + prefix + key + '`');\n    }\n\n    if (utils.isObject(obj[key]) &&\n        (!obj[key].constructor || utils.getFunctionName(obj[key].constructor) === 'Object') &&\n        (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type))) {\n      if (Object.keys(obj[key]).length) {\n        // nested object { last: { name: String }}\n        this.nested[prefix + key] = true;\n        this.add(obj[key], prefix + key + '.');\n      } else {\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]); // mixed type\n      }\n    } else {\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    }\n  }\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations b/c they conflict with mongoose functionality. Using these key name will throw an error.\n *\n *      on, emit, _events, db, get, set, init, isNew, errors, schema, options, modelName, collection, _pres, _posts, toObject\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      var schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nvar reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.on =\nreserved.once =\nreserved.listeners =\nreserved.removeListener =\n// document properties and functions\nreserved.collection =\nreserved.db =\nreserved.errors =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.get =\nreserved.modelName =\nreserved.save =\nreserved.schema =\nreserved.set =\nreserved.toObject =\nreserved.validate =\n// hooks.js\nreserved._pres = reserved._posts = 1;\n\n/*!\n * Document keys to print warnings for\n */\n\nvar warnings = {};\nwarnings.increment = '`increment` should not be used as a schema path name ' +\n    'unless you have disabled versioning.';\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  if (obj === undefined) {\n    if (this.paths[path]) {\n      return this.paths[path];\n    }\n    if (this.subpaths[path]) {\n      return this.subpaths[path];\n    }\n    if (this.singleNestedPaths[path]) {\n      return this.singleNestedPaths[path];\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n        ? getPositionalPath(this, path)\n        : undefined;\n  }\n\n  // some path names conflict with document methods\n  if (reserved[path]) {\n    throw new Error('`' + path + '` may not be used as a schema pathname');\n  }\n\n  if (warnings[path]) {\n    console.log('WARN: ' + warnings[path]);\n  }\n\n  // update the tree\n  var subpaths = path.split(/\\./),\n      last = subpaths.pop(),\n      branch = this.tree;\n\n  subpaths.forEach(function(sub, i) {\n    if (!branch[sub]) {\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      var msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + subpaths.slice(0, i).concat([sub]).join('.')\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  });\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = Schema.interpretAsType(path, obj, this.options);\n\n  if (this.paths[path].$isSingleNested) {\n    for (var key in this.paths[path].schema.paths) {\n      this.singleNestedPaths[path + '.' + key] =\n          this.paths[path].schema.paths[key];\n    }\n    for (key in this.paths[path].schema.singleNestedPaths) {\n      this.singleNestedPaths[path + '.' + key] =\n          this.paths[path].schema.singleNestedPaths[key];\n    }\n\n    this.childSchemas.push(this.paths[path].schema);\n  } else if (this.paths[path].$isMongooseDocumentArray) {\n    this.childSchemas.push(this.paths[path].schema);\n  }\n  return this;\n};\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.interpretAsType = function(path, obj, options) {\n  if (obj.constructor) {\n    var constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      var oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  var type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\n      ? obj[options.typeKey]\n      : {};\n\n  if (utils.getFunctionName(type.constructor) === 'Object' || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || Array === type || type === 'array') {\n    // if it was specified through { type } look for `cast`\n    var cast = (Array === type || type === 'array')\n        ? obj.cast\n        : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, Schema.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\n        && utils.getFunctionName(cast.constructor) === 'Object') {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        var childSchemaOptions = {minimize: options.minimize};\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        var childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n          ? cast[options.typeKey]\n          : cast;\n\n      name = typeof type === 'string'\n          ? type\n          : type.schemaName || utils.getFunctionName(type);\n\n      if (!(name in MongooseTypes)) {\n        throw new TypeError('Undefined type `' + name + '` at array `' + path +\n          '`');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  var name;\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else {\n    name = typeof type === 'string'\n        ? type\n      // If not string, `type` is a function. Outside of IE, function.name\n      // gives you the function name. In IE, you need to compute it\n        : type.schemaName || utils.getFunctionName(type);\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n\n  if (undefined == MongooseTypes[name]) {\n    throw new TypeError('Undefined type `' + name + '` at `' + path +\n        '`\\n  Did you try nesting Schemas? ' +\n        'You can only nest using refs or arrays.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and schemaType as arguments on each iteration.\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  var keys = Object.keys(this.paths),\n      len = keys.length;\n\n  for (var i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  var paths = Object.keys(this.paths),\n      i = paths.length,\n      ret = [];\n\n  while (i--) {\n    var path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  if (path in this.paths) {\n    return 'real';\n  }\n  if (path in this.virtuals) {\n    return 'virtual';\n  }\n  if (path in this.nested) {\n    return 'nested';\n  }\n  if (path in this.subpaths) {\n    return 'real';\n  }\n  if (path in this.singleNestedPaths) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  var subpaths = path.split(/\\./g);\n  path = '';\n  for (var i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (path in this.paths &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  if (timestamps) {\n    var createdAt = timestamps.createdAt || 'createdAt';\n    var updatedAt = timestamps.updatedAt || 'updatedAt';\n    var schemaAdditions = {};\n\n    schemaAdditions[updatedAt] = Date;\n\n    if (!this.paths[createdAt]) {\n      schemaAdditions[createdAt] = Date;\n    }\n\n    this.add(schemaAdditions);\n\n    this.pre('save', function(next) {\n      var defaultTimestamp = new Date();\n      var auto_id = this._id && this._id.auto;\n\n      if (!this[createdAt] && this.isSelected(createdAt)) {\n        this[createdAt] = auto_id ? this._id.getTimestamp() : defaultTimestamp;\n      }\n\n      if (this.isNew || this.isModified()) {\n        this[updatedAt] = this.isNew ? this[createdAt] : defaultTimestamp;\n      }\n\n      next();\n    });\n\n    var genUpdates = function(overwrite) {\n      var now = new Date();\n      var updates = {};\n      if (overwrite) {\n        updates[updatedAt] = now;\n        updates[createdAt] = now;\n        return updates;\n      }\n      updates = { $set: {}, $setOnInsert: {} };\n      updates.$set[updatedAt] = now;\n      updates.$setOnInsert[createdAt] = now;\n\n      return updates;\n    };\n\n    this.methods.initializeTimestamps = function() {\n      if (!this[createdAt]) {\n        this[createdAt] = new Date();\n      }\n      if (!this[updatedAt]) {\n        this[updatedAt] = new Date();\n      }\n      return this;\n    };\n\n    this.pre('findOneAndUpdate', function(next) {\n      var overwrite = this.options.overwrite;\n      this.findOneAndUpdate({}, genUpdates(overwrite), { overwrite: overwrite });\n      applyTimestampsToChildren(this);\n      next();\n    });\n\n    this.pre('update', function(next) {\n      var overwrite = this.options.overwrite;\n      this.update({}, genUpdates(overwrite), { overwrite: overwrite });\n      applyTimestampsToChildren(this);\n      next();\n    });\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(query) {\n  var now = new Date();\n  var update = query.getUpdate();\n  var keys = Object.keys(update);\n  var key;\n  var schema = query.model.schema;\n  var len;\n  var createdAt;\n  var updatedAt;\n  var timestamps;\n  var path;\n\n  var hasDollarKey = keys.length && keys[0].charAt(0) === '$';\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        var $path = schema.path(key);\n        if (update.$push[key] &&\n            $path &&\n            $path.$isMongooseDocumentArray &&\n            $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = timestamps.createdAt || 'createdAt';\n          updatedAt = timestamps.updatedAt || 'updatedAt';\n          update.$push[key][updatedAt] = now;\n          update.$push[key][createdAt] = now;\n        }\n      }\n    }\n    if (update.$set) {\n      for (key in update.$set) {\n        path = schema.path(key);\n        if (!path) {\n          continue;\n        }\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          len = update.$set[key].length;\n          timestamps = schema.path(key).schema.options.timestamps;\n          if (timestamps) {\n            createdAt = timestamps.createdAt || 'createdAt';\n            updatedAt = timestamps.updatedAt || 'updatedAt';\n            for (var i = 0; i < len; ++i) {\n              update.$set[key][i][updatedAt] = now;\n              update.$set[key][i][createdAt] = now;\n            }\n          }\n        } else if (update.$set[key] && path.$isSingleNested) {\n          timestamps = schema.path(key).schema.options.timestamps;\n          if (timestamps) {\n            createdAt = timestamps.createdAt || 'createdAt';\n            updatedAt = timestamps.updatedAt || 'updatedAt';\n            update.$set[key][updatedAt] = now;\n            update.$set[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction getPositionalPathType(self, path) {\n  var subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths[subpaths[0]];\n  }\n\n  var val = self.path(subpaths[0]);\n  var isNested = false;\n  if (!val) {\n    return val;\n  }\n\n  var last = subpaths.length - 1,\n      subpath,\n      i = 1;\n\n  for (; i < subpaths.length; ++i) {\n    isNested = false;\n    subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        var oldVal = val;\n        val = new SchemaType(subpath);\n        val.cast = function(value, doc, init) {\n          return oldVal.cast(value, doc, init)[0];\n        };\n        val.caster = oldVal.caster;\n        val.schema = oldVal.schema;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    var type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the document.\n *\n * ####Example\n *\n *     var toySchema = new Schema(..);\n *\n *     toySchema.pre('save', function (next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     })\n *\n *     toySchema.pre('validate', function (next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     })\n *\n * @param {String} method\n * @param {Function} callback\n * @see hooks.js https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3\n * @api public\n */\n\nSchema.prototype.pre = function() {\n  var name = arguments[0];\n  if (IS_KAREEM_HOOK[name]) {\n    this.s.hooks.pre.apply(this.s.hooks, arguments);\n    return this;\n  }\n  return this.queue('pre', arguments);\n};\n\n/**\n * Defines a post hook for the document\n *\n *     var schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     shema.post('find', function(docs) {\n *       console.log('this fired after you run a find query');\n *     });\n *\n *     var Model = mongoose.model('Model', schema);\n *\n *     var m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String} method name of the method to hook\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see hooks.js https://www.npmjs.com/package/hooks-fixed\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(method, fn) {\n  if (IS_KAREEM_HOOK[method]) {\n    this.s.hooks.post.apply(this.s.hooks, arguments);\n    return this;\n  }\n  // assuming that all callbacks with arity < 2 are synchronous post hooks\n  if (fn.length < 2) {\n    return this.queue('on', [arguments[0], function(doc) {\n      return fn.call(doc, doc);\n    }]);\n  }\n\n  if (fn.length === 3) {\n    this.s.hooks.post(method + ':error', fn);\n    return this;\n  }\n\n  return this.queue('post', [arguments[0], function(next) {\n    // wrap original function so that the callback goes last,\n    // for compatibility with old code that is using synchronous post hooks\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n    fn.call(this, this, function(err) {\n      return next.apply(_this, [err].concat(args));\n    });\n  }]);\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     var Kitty = mongoose.model('Kitty', schema);\n *\n *     var fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.methods[i] = name[i];\n    }\n  } else {\n    this.methods[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = new Schema(..);\n *     schema.static('findByName', function (name, callback) {\n *       return this.find({ name: name }, callback);\n *     });\n *\n *     var Drink = mongoose.model('Drink', schema);\n *     Drink.findByName('sanpellegrino', function (err, drinks) {\n *       //\n *     });\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets/gets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      break;\n    case 'safe':\n      this.options[key] = value === false\n          ? {w: 0}\n          : value;\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      break;\n    default:\n      this.options[key] = value;\n  }\n\n  return this;\n};\n\n/**\n * Gets a schema option.\n *\n * @param {String} key option name\n * @api public\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @static indexTypes\n * @receiver Schema\n * @api public\n */\n\nvar indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Compiles indexes from fields and schema-level indexes\n *\n * @api public\n */\n\nSchema.prototype.indexes = function() {\n  'use strict';\n\n  var indexes = [];\n  var seenPrefix = {};\n\n  var collectIndexes = function(schema, prefix) {\n    if (seenPrefix[prefix]) {\n      return;\n    }\n    seenPrefix[prefix] = true;\n\n    prefix = prefix || '';\n    var key, path, index, field, isObject, options, type;\n    var keys = Object.keys(schema.paths);\n\n    for (var i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      path = schema.paths[key];\n\n      if ((path instanceof MongooseTypes.DocumentArray) || path.$isSingleNested) {\n        collectIndexes(path.schema, key + '.');\n      } else {\n        index = path._index;\n\n        if (index !== false && index !== null && index !== undefined) {\n          field = {};\n          isObject = utils.isObject(index);\n          options = isObject ? index : {};\n          type = typeof index === 'string' ? index :\n              isObject ? index.type :\n                  false;\n\n          if (type && ~Schema.indexTypes.indexOf(type)) {\n            field[prefix + key] = type;\n          } else if (options.text) {\n            field[prefix + key] = 'text';\n            delete options.text;\n          } else {\n            field[prefix + key] = 1;\n          }\n\n          delete options.type;\n          if (!('background' in options)) {\n            options.background = true;\n          }\n\n          indexes.push([field, options]);\n        }\n      }\n    }\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  };\n\n  collectIndexes(this);\n  return indexes;\n\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    var subindexes = schema._indexes,\n        len = subindexes.length,\n        indexObj,\n        newindex,\n        klen,\n        keys,\n        key,\n        i = 0,\n        j;\n\n    for (i = 0; i < len; ++i) {\n      indexObj = subindexes[i][0];\n      keys = Object.keys(indexObj);\n      klen = keys.length;\n      newindex = {};\n\n      // use forward iteration, order matters\n      for (j = 0; j < klen; ++j) {\n        key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      indexes.push([newindex, subindexes[i][1]]);\n    }\n  }\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (options && options.ref) {\n    if (!options.localField) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (!options.foreignField) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(next, obj) {\n      if (name in obj) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne) {\n          this.$$populatedVirtuals[name] = Array.isArray(obj[name]) ?\n            obj[name][0] :\n            obj[name];\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(obj[name]) ?\n            obj[name] :\n            obj[name] == null ? [] : [obj[name]];\n        }\n\n        delete obj[name];\n      }\n      if (this.ownerDocument) {\n        next();\n        return obj;\n      } else {\n        next();\n      }\n    });\n\n    var virtual = this.virtual(name);\n    virtual.options = options;\n    return virtual.\n      get(function() {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        if (name in this.$$populatedVirtuals) {\n          return this.$$populatedVirtuals[name];\n        }\n        return null;\n      }).\n      set(function(v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        this.$$populatedVirtuals[name] = v;\n      });\n  }\n\n  var virtuals = this.virtuals;\n  var parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n        ? new VirtualType(options, name)\n        : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getVirtual = function(name) {\n  return _getVirtual(this, name);\n};\n\n/*!\n * ignore\n */\n\nfunction _getVirtual(schema, name) {\n  var parts = name.split('.');\n  var cur = '';\n  var nestedSchemaPath = '';\n  for (var i = 0; i < parts.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + parts[i];\n    if (schema.virtuals[cur]) {\n      if (i === parts.length - 1) {\n        schema.virtuals[cur].$nestedSchemaPath = nestedSchemaPath;\n        return schema.virtuals[cur];\n      }\n      continue;\n    } else if (schema.paths[cur] && schema.paths[cur].schema) {\n      schema = schema.paths[cur].schema;\n      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;\n      cur = '';\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals[name];\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * @param {String|Array} path\n *\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name)) {\n        delete this.paths[name];\n\n        var pieces = name.split('.');\n        var last = pieces.pop();\n        var branch = this.tree;\n        for (var i = 0; i < pieces.length; ++i) {\n          branch = branch[pieces[i]];\n        }\n        delete branch[last];\n      }\n    }, this);\n  }\n};\n\n/**\n * Loads an ES6 class into a schema. Maps setters + getters, static methods, and instance methods to schema virtuals, statics, and methods.\n *\n * @param {Function} model\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype || model === Function.prototype) {\n    return this;\n  }\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype)$/)) {\n        return;\n      }\n      var method = Object.getOwnPropertyDescriptor(model, name);\n      if (typeof method.value === 'function') this.static(name, method.value);\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    var method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return (this.loadClass(Object.getPrototypeOf(model)));\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  var _this = this;\n  var pathschema = _this.path(path);\n  var resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$') {\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  var _this = this;\n  var pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$') {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](#schema-string-js)\n * - [Number](#schema-number-js)\n * - [Boolean](#schema-boolean-js) | Bool\n * - [Array](#schema-array-js)\n * - [Buffer](#schema-buffer-js)\n * - [Date](#schema-date-js)\n * - [ObjectId](#schema-objectid-js) | Oid\n * - [Mixed](#schema-mixed-js)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     var Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"]},"metadata":{},"sourceType":"script"}