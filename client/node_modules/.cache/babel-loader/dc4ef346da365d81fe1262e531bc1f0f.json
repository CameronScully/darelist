{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar NodeJSDocument = require('./document'),\n    EventEmitter = require('events').EventEmitter,\n    MongooseError = require('./error'),\n    Schema = require('./schema'),\n    ObjectId = require('./types/objectid'),\n    utils = require('./utils'),\n    ValidationError = MongooseError.ValidationError,\n    InternalCache = require('./internal');\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\n\nfunction Document(obj, schema, fields, skipId, skipInit) {\n  if (!(this instanceof Document)) {\n    return new Document(obj, schema, fields, skipId, skipInit);\n  }\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  } // When creating EmbeddedDocument, it already has the schema and he doesn't need the _id\n\n\n  schema = this.schema || schema; // Generate ObjectId if it is missing, but it requires a scheme\n\n  if (!this.schema && schema.options._id) {\n    obj = obj || {};\n\n    if (obj._id === undefined) {\n      obj._id = new ObjectId();\n    }\n  }\n\n  if (!schema) {\n    throw new MongooseError.MissingSchemaError();\n  }\n\n  this.$__setSchema(schema);\n  this.$__ = new InternalCache();\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined; // var schema = this.schema;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = this.schema.options && this.schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = this.schema.requiredPaths();\n\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  this._doc = this.$__buildDoc(obj, fields, skipId);\n\n  if (!skipInit && obj) {\n    this.init(obj);\n  }\n\n  this.$__registerHooksFromSchema(); // apply methods\n\n  for (var m in schema.methods) {\n    this[m] = schema.methods[m];\n  } // apply statics\n\n\n  for (var s in schema.statics) {\n    this[s] = schema.statics[s];\n  }\n}\n/*!\n * Inherit from the NodeJS document\n */\n\n\nDocument.prototype = Object.create(NodeJSDocument.prototype);\nDocument.prototype.constructor = Document;\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mongoose/lib/browserDocument.js"],"names":["NodeJSDocument","require","EventEmitter","MongooseError","Schema","ObjectId","utils","ValidationError","InternalCache","Document","obj","schema","fields","skipId","skipInit","isObject","instanceOfSchema","options","_id","undefined","MissingSchemaError","$__setSchema","$__","emitter","isNew","errors","strictMode","strict","selected","required","requiredPaths","i","length","activePaths","setMaxListeners","_doc","$__buildDoc","init","$__registerHooksFromSchema","m","methods","s","statics","prototype","Object","create","constructor","module","exports"],"mappings":"AAAA;;;AAIA,IAAIA,cAAc,GAAGC,OAAO,CAAC,YAAD,CAA5B;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YADrC;AAAA,IAEIC,aAAa,GAAGF,OAAO,CAAC,SAAD,CAF3B;AAAA,IAGIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAHpB;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAAC,kBAAD,CAJtB;AAAA,IAKIK,KAAK,GAAGL,OAAO,CAAC,SAAD,CALnB;AAAA,IAMIM,eAAe,GAAGJ,aAAa,CAACI,eANpC;AAAA,IAOIC,aAAa,GAAGP,OAAO,CAAC,YAAD,CAP3B;AASA;;;;;;;;;;;;;AAYA,SAASQ,QAAT,CAAkBC,GAAlB,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+CC,QAA/C,EAAyD;AACvD,MAAI,EAAE,gBAAgBL,QAAlB,CAAJ,EAAiC;AAC/B,WAAO,IAAIA,QAAJ,CAAaC,GAAb,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,QAA1C,CAAP;AACD;;AAGD,MAAIR,KAAK,CAACS,QAAN,CAAeJ,MAAf,KAA0B,CAACA,MAAM,CAACK,gBAAtC,EAAwD;AACtDL,IAAAA,MAAM,GAAG,IAAIP,MAAJ,CAAWO,MAAX,CAAT;AACD,GARsD,CAUvD;;;AACAA,EAAAA,MAAM,GAAG,KAAKA,MAAL,IAAeA,MAAxB,CAXuD,CAavD;;AACA,MAAI,CAAC,KAAKA,MAAN,IAAgBA,MAAM,CAACM,OAAP,CAAeC,GAAnC,EAAwC;AACtCR,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;;AAEA,QAAIA,GAAG,CAACQ,GAAJ,KAAYC,SAAhB,EAA2B;AACzBT,MAAAA,GAAG,CAACQ,GAAJ,GAAU,IAAIb,QAAJ,EAAV;AACD;AACF;;AAED,MAAI,CAACM,MAAL,EAAa;AACX,UAAM,IAAIR,aAAa,CAACiB,kBAAlB,EAAN;AACD;;AAED,OAAKC,YAAL,CAAkBV,MAAlB;AAEA,OAAKW,GAAL,GAAW,IAAId,aAAJ,EAAX;AACA,OAAKc,GAAL,CAASC,OAAT,GAAmB,IAAIrB,YAAJ,EAAnB;AACA,OAAKsB,KAAL,GAAa,IAAb;AACA,OAAKC,MAAL,GAAcN,SAAd,CA/BuD,CAiCvD;;AAEA,MAAI,OAAOP,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,SAAKU,GAAL,CAASI,UAAT,GAAsBd,MAAtB;AACAA,IAAAA,MAAM,GAAGO,SAAT;AACD,GAHD,MAGO;AACL,SAAKG,GAAL,CAASI,UAAT,GAAsB,KAAKf,MAAL,CAAYM,OAAZ,IAAuB,KAAKN,MAAL,CAAYM,OAAZ,CAAoBU,MAAjE;AACA,SAAKL,GAAL,CAASM,QAAT,GAAoBhB,MAApB;AACD;;AAED,MAAIiB,QAAQ,GAAG,KAAKlB,MAAL,CAAYmB,aAAZ,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACxC,SAAKT,GAAL,CAASW,WAAT,CAAqBhC,OAArB,CAA6B4B,QAAQ,CAACE,CAAD,CAArC;AACD;;AAED,OAAKT,GAAL,CAASC,OAAT,CAAiBW,eAAjB,CAAiC,CAAjC;AACA,OAAKC,IAAL,GAAY,KAAKC,WAAL,CAAiB1B,GAAjB,EAAsBE,MAAtB,EAA8BC,MAA9B,CAAZ;;AAEA,MAAI,CAACC,QAAD,IAAaJ,GAAjB,EAAsB;AACpB,SAAK2B,IAAL,CAAU3B,GAAV;AACD;;AAED,OAAK4B,0BAAL,GAvDuD,CAyDvD;;AACA,OAAK,IAAIC,CAAT,IAAc5B,MAAM,CAAC6B,OAArB,EAA8B;AAC5B,SAAKD,CAAL,IAAU5B,MAAM,CAAC6B,OAAP,CAAeD,CAAf,CAAV;AACD,GA5DsD,CA6DvD;;;AACA,OAAK,IAAIE,CAAT,IAAc9B,MAAM,CAAC+B,OAArB,EAA8B;AAC5B,SAAKD,CAAL,IAAU9B,MAAM,CAAC+B,OAAP,CAAeD,CAAf,CAAV;AACD;AACF;AAED;;;;;AAGAhC,QAAQ,CAACkC,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAc7C,cAAc,CAAC2C,SAA7B,CAArB;AACAlC,QAAQ,CAACkC,SAAT,CAAmBG,WAAnB,GAAiCrC,QAAjC;AAEA;;;;AAGAA,QAAQ,CAACF,eAAT,GAA2BA,eAA3B;AACAwC,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGvC,QAA3B","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar NodeJSDocument = require('./document'),\n    EventEmitter = require('events').EventEmitter,\n    MongooseError = require('./error'),\n    Schema = require('./schema'),\n    ObjectId = require('./types/objectid'),\n    utils = require('./utils'),\n    ValidationError = MongooseError.ValidationError,\n    InternalCache = require('./internal');\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, schema, fields, skipId, skipInit) {\n  if (!(this instanceof Document)) {\n    return new Document(obj, schema, fields, skipId, skipInit);\n  }\n\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n\n  // When creating EmbeddedDocument, it already has the schema and he doesn't need the _id\n  schema = this.schema || schema;\n\n  // Generate ObjectId if it is missing, but it requires a scheme\n  if (!this.schema && schema.options._id) {\n    obj = obj || {};\n\n    if (obj._id === undefined) {\n      obj._id = new ObjectId();\n    }\n  }\n\n  if (!schema) {\n    throw new MongooseError.MissingSchemaError();\n  }\n\n  this.$__setSchema(schema);\n\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined;\n\n  // var schema = this.schema;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = this.schema.options && this.schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = this.schema.requiredPaths();\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  this._doc = this.$__buildDoc(obj, fields, skipId);\n\n  if (!skipInit && obj) {\n    this.init(obj);\n  }\n\n  this.$__registerHooksFromSchema();\n\n  // apply methods\n  for (var m in schema.methods) {\n    this[m] = schema.methods[m];\n  }\n  // apply statics\n  for (var s in schema.statics) {\n    this[s] = schema.statics[s];\n  }\n}\n\n/*!\n * Inherit from the NodeJS document\n */\nDocument.prototype = Object.create(NodeJSDocument.prototype);\nDocument.prototype.constructor = Document;\n\n/*!\n * Module exports.\n */\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"]},"metadata":{},"sourceType":"script"}