{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar slice = require('sliced');\n\nvar assert = require('assert');\n\nvar util = require('util');\n\nvar utils = require('./utils');\n\nvar debug = require('debug')('mquery');\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query)) return new Query(criteria, options);\n  var proto = this.constructor.prototype;\n  this.op = proto.op || undefined;\n  this.options = {};\n  this.setOptions(proto.options);\n  this._conditions = proto._conditions ? utils.clone(proto._conditions, {\n    retainKeyOrder: this.options.retainKeyOrder\n  }) : {};\n  this._fields = proto._fields ? utils.clone(proto._fields, {\n    retainKeyOrder: this.options.retainKeyOrder\n  }) : undefined;\n  this._update = proto._update ? utils.clone(proto._update, {\n    retainKeyOrder: this.options.retainKeyOrder\n  }) : undefined;\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\n\nvar $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function () {\n    return $withinCmd == '$geoWithin';\n  },\n  set: function (v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query); // set inherited defaults\n\n  var p = CustomQuery.prototype;\n  p.options = {};\n  p.setOptions(this.options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions, {\n    retainKeyOrder: this.options.retainKeyOrder\n  });\n  p._fields = utils.clone(this._fields, {\n    retainKeyOrder: this.options.retainKeyOrder\n  });\n  p._update = utils.clone(this._update, {\n    retainKeyOrder: this.options.retainKeyOrder\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n  return CustomQuery;\n};\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options))) return this; // set arbitrary options\n\n  var methods = utils.keys(options),\n      method;\n\n  for (var i = 0; i < methods.length; ++i) {\n    method = methods[i]; // use methods if exist (safer option manipulation)\n\n    if ('function' == typeof this[method]) {\n      var args = utils.isArray(options[method]) ? options[method] : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n};\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n  return this;\n};\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n};\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n  var type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.or = function or(array) {\n  var or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.nor = function nor(array) {\n  var nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.and = function and(array) {\n  var and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    var path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod');\n\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.exists = function () {\n  var path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0]) throw new TypeError(\"Invalid argument\");\n  var fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (fn) {\n    criteria = new Query();\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n}; // Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  var area = arguments[0];\n  if (!area) throw new TypeError('Invalid argument');\n  if (area.center) return this.circle(area);\n  if (area.box) return this.box.apply(this, area.box);\n  if (area.polygon) return this.polygon.apply(this, area.polygon);\n  if (area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.box = function () {\n  var path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    '$box': box\n  };\n  return this;\n};\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.polygon = function () {\n  var val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    '$polygon': val\n  };\n  return this;\n};\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.circle = function () {\n  var path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!('radius' in val && val.center)) throw new Error('center and radius are required');\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  var type = val.spherical ? '$centerSphere' : '$center';\n  var wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n  if ('unique' in val) conds[wKey].$uniqueDocs = !!val.unique;\n  return this;\n};\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n\nQuery.prototype.near = function near() {\n  var path, val;\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  var type = val.spherical ? '$nearSphere' : '$near'; // center could be a GeoJSON object or an Array\n\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n    var radius = 'maxDistance' in val ? val.maxDistance : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format(\"Invalid GeoJSON specified for %s\", type));\n    }\n\n    conds[type] = {\n      $geometry: val.center\n    }; // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n};\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  var area = arguments[0];\n  if (null != area && area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison || '$geoWithin' == this._geoComparison || '$near' == this._geoComparison || '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = {\n    $geometry: val\n  };\n  return this;\n}; // end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n\nQuery.prototype.select = function select() {\n  var arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error(\"Invalid select: select only takes 1 argument\");\n  }\n\n  this._validate('select');\n\n  var fields = this._fields || (this._fields = {});\n  var type = typeof arg;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) && 'number' == typeof arg.length) {\n    if ('string' == type) arg = arg.split(/\\s+/);\n\n    for (var i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg) && !Array.isArray(arg)) {\n    var keys = utils.keys(arg);\n\n    for (var i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('slice');\n\n  var path, val;\n\n  if (1 === arguments.length) {\n    var arg = arguments[0];\n\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n\n      return this;\n    }\n\n    this._ensurePath('slice');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  var myFields = this._fields || (this._fields = {});\n  myFields[path] = {\n    '$slice': val\n  };\n  return this;\n};\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  var len;\n\n  this._validate('sort');\n\n  var type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n  if (Array.isArray(arg)) {\n    len = arg.length;\n\n    for (var i = 0; i < arg.length; ++i) {\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n\n    return this;\n  } // .sort('field -test')\n\n\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n\n    for (var i = 0; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  } // .sort({ field: 1, test: -1 })\n\n\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n/*!\n * @ignore\n */\n\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" + \"\\n- `.sort([['field', 1], ['test', -1]])`\" + \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n\n  if (value && value.$meta) {\n    var s = opts.sort || (opts.sort = {});\n    s[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (utils.isArray(value)) value = '[' + value + ']';\n    throw new TypeError('Invalid sort value: {' + field + ': ' + value + ' }');\n  } // store `sort` in a sane format\n\n\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString().replace(\"asc\", \"1\").replace(\"ascending\", \"1\").replace(\"desc\", \"-1\").replace(\"descending\", \"-1\");\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" + \"\\n- `.sort([['field', 1], ['test', -1]])`\" + \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n\n  var valueStr = value.toString().replace(\"asc\", \"1\").replace(\"ascending\", \"1\").replace(\"desc\", \"-1\").replace(\"descending\", \"-1\");\n  opts.sort.push([field, value]);\n}\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n\n;\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = function (v) {\n  this._validate('maxTime');\n\n  this.options.maxTimeMS = v;\n  return this;\n};\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object} val a hint object\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  var arg = arguments[0];\n\n  if (utils.isObject(arg)) {\n    var hint = this.options.hint || (this.options.hint = {}); // must keep object keys in order so don't use Object.keys()\n\n    for (var k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n};\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.read = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error(\"Deprecation warning: 'tags' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.\");\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n\nQuery.prototype.merge = function (source) {\n  if (!source) return this;\n  if (!Query.canMerge(source)) throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  } // plain object\n\n\n  utils.merge(this._conditions, source);\n  return this;\n};\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this,\n      conds = this._conditions,\n      options = this._optionsForExec();\n\n  options.fields = this._fieldsForExec();\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError(\".cursor only support .find method\");\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  var conds = this._conditions,\n      options = this._optionsForExec();\n\n  options.fields = this._fieldsForExec();\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this,\n      conds = this._conditions,\n      options = this._optionsForExec();\n\n  options.fields = this._fieldsForExec();\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n\n        break;\n\n      case 'undefined':\n      case 'string':\n        break;\n\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n        break;\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  var conds = this._conditions,\n      options = this._optionsForExec();\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  this.op = 'update';\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      break;\n\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    this.setOptions(options);\n  } // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n\n\n  if (!(force || callback)) return this;\n\n  if (!this._update || !this.options.overwrite && 0 === utils.keys(this._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return this;\n  }\n\n  options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  var criteria = this._conditions;\n  doc = this._updateForExec();\n  debug('update', this._collection.collectionName, criteria, doc, options);\n  callback = this._wrapCallback('update', callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n\n  this._collection.update(criteria, doc, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback)) return this;\n\n  var options = this._optionsForExec();\n\n  if (!callback) options.safe = false;\n  var conds = this._conditions;\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n\n      break;\n\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      options = undefined;\n      break;\n\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } // apply doc\n\n\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n  if (!callback) return this;\n  return this._findAndModify('update', callback);\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\n\nQuery.prototype.findOneAndRemove = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  } // apply conditions\n\n\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  } // apply options\n\n\n  options && this.setOptions(options);\n  if (!callback) return this;\n  return this._findAndModify('remove', callback);\n};\n/**\n * _findAndModify\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\n\nQuery.prototype._findAndModify = function (type, callback) {\n  assert.equal('function', typeof callback);\n\n  var opts = this._optionsForExec(),\n      self = this,\n      fields,\n      sort,\n      doc;\n\n  if ('remove' == type) {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) opts.new = true;\n    if (!('upsert' in opts)) opts.upsert = false;\n    doc = this._updateForExec();\n\n    if (!doc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        doc = {\n          $set: {}\n        };\n      } else {\n        return this.findOne(callback);\n      }\n    }\n  }\n\n  var fields = this._fieldsForExec();\n\n  if (fields) {\n    opts.fields = fields;\n  }\n\n  var conds = this._conditions;\n  debug('findAndModify', this._collection.collectionName, conds, doc, opts);\n  callback = this._wrapCallback('findAndModify', callback, {\n    conditions: conds,\n    doc: doc,\n    options: opts\n  });\n\n  this._collection.findAndModify(conds, doc, opts, utils.tick(callback));\n\n  return this;\n};\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\n\n\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  var traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n    var traceCallback = traceFunction && traceFunction.call(null, method, queryInfo, this);\n    var startTime = new Date().getTime();\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        var millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n};\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, \"Missing query type: (find, update, etc)\");\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  var self = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function (success, error) {\n      self[self.op](function (err, val) {\n        if (err) error(err);else success(val);\n        self = success = error = null;\n      });\n    });\n  }\n};\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\n\nQuery.prototype.thunk = function () {\n  var self = this;\n  return function (cb) {\n    self.exec(cb);\n  };\n};\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.then = function (resolve, reject) {\n  var self = this;\n  var promise = new Query.Promise(function (success, error) {\n    self.exec(function (err, val) {\n      if (err) error(err);else success(val);\n      self = success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n/**\n * Returns a stream for the given find query.\n *\n * @throws Error if operation is not a find\n * @returns {Stream} Node 0.8 style\n */\n\n\nQuery.prototype.stream = function (streamOptions) {\n  if ('find' != this.op) throw new Error('stream() is only available for find');\n  var conds = this._conditions;\n\n  var options = this._optionsForExec();\n\n  options.fields = this._fieldsForExec();\n  debug('stream', this._collection.collectionName, conds, options, streamOptions);\n  return this._collection.findStream(conds, options, streamOptions);\n};\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return false;\n\n    if (this._fields[key] && typeof this._fields[key] === 'object' && this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n};\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\n\nQuery.prototype._optionsForExec = function () {\n  var options = utils.clone(this.options, {\n    retainKeyOrder: true\n  });\n  return options;\n};\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields, {\n    retainKeyOrder: true\n  });\n};\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\n\nQuery.prototype._updateForExec = function () {\n  var update = utils.clone(this._update, {\n    retainKeyOrder: true\n  }),\n      ops = utils.keys(update),\n      i = ops.length,\n      ret = {},\n      hasKeys,\n      val;\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n};\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    var msg = method + '() must be used after where() ' + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n/*!\n * Permissions\n */\n\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function (a, b) {\n  var denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\n\nQuery.prototype._validate = function (action) {\n  var fail;\n  var validator;\n\n  if (undefined === action) {\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n    fail = validator(this);\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\n\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n/*!\n * Exports.\n */\n\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = require('bluebird');\nmodule.exports = exports = Query; // TODO\n// test utils","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/mquery/lib/mquery.js"],"names":["slice","require","assert","util","utils","debug","Query","criteria","options","proto","constructor","prototype","op","undefined","setOptions","_conditions","clone","retainKeyOrder","_fields","_update","_path","_distinct","_collection","_traceFunction","find","remove","update","collection","$withinCmd","Object","defineProperty","get","set","v","toConstructor","CustomQuery","call","inherits","p","isObject","methods","keys","method","i","length","args","isArray","apply","coll","Collection","$where","js","where","arguments","type","Array","merge","TypeError","equals","val","_ensurePath","path","eq","or","array","$or","push","nor","$nor","and","$and","split","forEach","$conditional","conds","mod","$mod","exists","$exists","elemMatch","fn","$elemMatch","within","_geoComparison","box","polygon","area","center","circle","coordinates","geometry","Error","spherical","wKey","radius","$uniqueDocs","unique","near","maxDistance","$maxDistance","minDistance","$minDistance","format","$geometry","intersects","select","arg","_validate","fields","isArgumentsObject","len","field","include","substring","numKeys","myFields","sort","_pushArr","ascend","opts","value","$meta","s","String","toLowerCase","test","valueStr","toString","replace","parseInt","maxTime","maxTimeMS","snapshot","hint","k","slaveOk","read","pref","deprecationWarningIssued","console","error","readPreference","readPref","tailable","source","canMerge","mergeClone","callback","self","_optionsForExec","_fieldsForExec","collectionName","_wrapCallback","conditions","tick","cursor","findCursor","findOne","count","distinct","doc","force","_mergeUpdate","overwrite","soon","bind","safe","_updateForExec","findOneAndUpdate","_findAndModify","findOneAndRemove","equal","new","upsert","$set","findAndModify","queryInfo","traceFunction","traceCallback","startTime","Date","getTime","wrapperCallback","err","result","millis","setTraceFunction","exec","ok","Promise","success","thunk","cb","then","resolve","reject","promise","stream","streamOptions","findStream","selected","selectedInclusively","key","selectedExclusively","ops","ret","hasKeys","splice","indexOf","_compiledUpdate","msg","permissions","_isPermitted","a","b","denied","action","fail","validator","setGlobalTraceFunction","env","BaseCollection","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\n\nvar slice = require('sliced')\nvar assert = require('assert')\nvar util = require('util')\nvar utils = require('./utils')\nvar debug = require('debug')('mquery');\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query (criteria, options) {\n  if (!(this instanceof Query))\n    return new Query(criteria, options);\n\n  var proto = this.constructor.prototype;\n\n  this.op = proto.op || undefined;\n\n  this.options = {};\n  this.setOptions(proto.options);\n\n  this._conditions = proto._conditions\n    ? utils.clone(proto._conditions, { retainKeyOrder: this.options.retainKeyOrder })\n    : {};\n\n  this._fields = proto._fields\n    ? utils.clone(proto._fields, { retainKeyOrder: this.options.retainKeyOrder })\n    : undefined;\n\n  this._update = proto._update\n    ? utils.clone(proto._update, { retainKeyOrder: this.options.retainKeyOrder })\n    : undefined;\n\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nvar $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n    get: function ( ) { return $withinCmd == '$geoWithin' }\n  , set: function (v) {\n      if (true === v) {\n        // mongodb >= 2.4\n        $withinCmd = '$geoWithin';\n      } else {\n        $withinCmd = '$within';\n      }\n    }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor () {\n  function CustomQuery (criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions, { retainKeyOrder: this.options.retainKeyOrder });\n  p._fields = utils.clone(this._fields, { retainKeyOrder: this.options.retainKeyOrder });\n  p._update = utils.clone(this._update, { retainKeyOrder: this.options.retainKeyOrder });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n\n  return CustomQuery;\n}\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options)))\n    return this;\n\n  // set arbitrary options\n  var methods = utils.keys(options)\n    , method\n\n  for (var i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      var args = utils.isArray(options[method])\n        ? options[method]\n        : [options[method]];\n      this[method].apply(this, args)\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n}\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection (coll) {\n  this._collection = new Query.Collection(coll);\n\n  return this;\n}\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n}\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n\n  var type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n}\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals (val) {\n  this._ensurePath('equals');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n}\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq (val) {\n  this._ensurePath('eq');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n}\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or (array) {\n  var or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n}\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor (array) {\n  var nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n}\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and (array) {\n  var and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n}\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    var path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n      this._conditions[path] : \n      (this._conditions[path] = {});\n    conds['$' + $conditional] = val;\n    return this;\n  };\n})\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod')\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod')\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n}\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function () {\n  var path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n}\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0])\n    throw new TypeError(\"Invalid argument\");\n\n  var fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (fn) {\n    criteria = new Query;\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n}\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within () {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  var area = arguments[0];\n\n  if (!area)\n    throw new TypeError('Invalid argument');\n\n  if (area.center)\n    return this.circle(area);\n\n  if (area.box)\n    return this.box.apply(this, area.box);\n\n  if (area.polygon)\n    return this.polygon.apply(this, area.polygon);\n\n  if (area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n}\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function () {\n  var path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$box': box  };\n  return this;\n}\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function () {\n  var val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$polygon': val };\n  return this;\n}\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function () {\n  var path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!('radius' in val && val.center))\n    throw new Error('center and radius are required');\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$centerSphere'\n    : '$center';\n\n  var wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n\n  if ('unique' in val)\n    conds[wKey].$uniqueDocs = !! val.unique;\n\n  return this;\n}\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near () {\n  var path, val;\n\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$nearSphere'\n    : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n\n    var radius = 'maxDistance' in val\n      ? val.maxDistance\n      : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format(\"Invalid GeoJSON specified for %s\", type));\n    }\n    conds[type] = { $geometry : val.center };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n}\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects () {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  var area = arguments[0];\n\n  if (null != area && area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n}\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry () {\n  if (!('$within' == this._geoComparison ||\n        '$geoWithin' == this._geoComparison ||\n        '$near' == this._geoComparison ||\n        '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = { $geometry: val };\n\n  return this;\n}\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select () {\n  var arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error(\"Invalid select: select only takes 1 argument\");\n  }\n\n  this._validate('select');\n\n  var fields = this._fields || (this._fields = {});\n  var type = typeof arg;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\n    'number' == typeof arg.length) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (var i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg) && !Array.isArray(arg)) {\n    var keys = utils.keys(arg);\n    for (var i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n}\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length)\n    return this;\n\n  this._validate('slice');\n\n  var path, val;\n\n  if (1 === arguments.length) {\n    var arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  var myFields = this._fields || (this._fields = {});\n  myFields[path] = { '$slice': val };\n  return this;\n}\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  var len;\n\n  this._validate('sort');\n\n  var type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (var i = 0; i < arg.length; ++i) {\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (var i = 0; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (var i = 0; i < keys.length; ++i) {\n      var field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n}\n\n/*!\n * @ignore\n */\n\nfunction push (opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" +\n      \"\\n- `.sort([['field', 1], ['test', -1]])`\" +\n      \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n\n  if (value && value.$meta) {\n    var s = opts.sort || (opts.sort = {});\n    s[field] = { $meta : value.$meta };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (utils.isArray(value)) value = '['+value+']';\n    throw new TypeError('Invalid sort value: {' + field + ': ' + value + ' }');\n  }\n  // store `sort` in a sane format\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString()\n                  .replace(\"asc\", \"1\")\n                  .replace(\"ascending\", \"1\")\n                  .replace(\"desc\", \"-1\")\n                  .replace(\"descending\", \"-1\");\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr (opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" +\n      \"\\n- `.sort([['field', 1], ['test', -1]])`\" +\n      \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n  var valueStr = value.toString()\n    .replace(\"asc\", \"1\")\n    .replace(\"ascending\", \"1\")\n    .replace(\"desc\", \"-1\")\n    .replace(\"descending\", \"-1\");\n  opts.sort.push([field, value]);\n}\n\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n;['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n})\n\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = function (v) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = v;\n  return this;\n};\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length\n    ? !! arguments[0]\n    : true\n\n  return this;\n}\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object} val a hint object\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  var arg = arguments[0];\n  if (utils.isObject(arg)) {\n    var hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (var k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n}\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n}\n\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error(\"Deprecation warning: 'tags' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.\");\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n}\n\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length\n    ? !! arguments[0]\n    : true;\n\n  return this;\n}\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source)\n    return this;\n\n  if (!Query.canMerge(source))\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n\n  return this;\n}\n\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this\n    , conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec()\n\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n}\n\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor (criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError(\".cursor only support .find method\");\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec()\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n}\n\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this\n    , conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec();\n\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n}\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function')\n        break;\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.update = function update (criteria, doc, options, callback) {\n  this.op = 'update';\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    this.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback))\n    return this;\n\n  if (!this._update ||\n      !this.options.overwrite && 0 === utils.keys(this._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return this;\n  }\n\n  options = this._optionsForExec();\n  if (!callback) options.safe = false;\n\n  var criteria = this._conditions;\n  doc = this._updateForExec();\n\n  debug('update', this._collection.collectionName, criteria, doc, options);\n  callback = this._wrapCallback('update', callback, {\n    conditions: criteria\n  , doc: doc\n  , options: options\n  });\n\n  this._collection.update(criteria, doc, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec()\n  if (!callback) options.safe = false;\n\n  var conds = this._conditions;\n\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n  return this._findAndModify('update', callback);\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n\n  return this._findAndModify('remove', callback);\n}\n\n/**\n * _findAndModify\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function (type, callback) {\n  assert.equal('function', typeof callback);\n\n  var opts = this._optionsForExec()\n    , self = this\n    , fields\n    , sort\n    , doc\n\n  if ('remove' == type) {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) opts.new = true;\n    if (!('upsert' in opts)) opts.upsert = false;\n\n    doc = this._updateForExec()\n    if (!doc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        doc = { $set: {} };\n      } else {\n        return this.findOne(callback);\n      }\n    }\n  }\n\n  var fields = this._fieldsForExec();\n  if (fields) {\n    opts.fields = fields;\n  }\n\n  var conds = this._conditions;\n\n  debug('findAndModify', this._collection.collectionName, conds, doc, opts);\n  callback = this._wrapCallback('findAndModify', callback, {\n    conditions: conds\n  , doc: doc\n  , options: opts\n  });\n\n  this._collection\n  .findAndModify(conds, doc, opts, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  var traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n\n    var traceCallback = traceFunction &&\n      traceFunction.call(null, method, queryInfo, this);\n\n    var startTime = new Date().getTime();\n\n    return function wrapperCallback (err, result) {\n      if (traceCallback) {\n        var millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n}\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n}\n\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\nQuery.prototype.exec = function exec (op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, \"Missing query type: (find, update, etc)\");\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  var self = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function(success, error) {\n      self[self.op](function(err, val) {\n        if (err) error(err);\n        else success(val);\n        self = success = error = null;\n      });\n    });\n  }\n}\n\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\nQuery.prototype.thunk = function() {\n  var self = this;\n  return function(cb) {\n    self.exec(cb);\n  }\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  var self = this;\n  var promise = new Query.Promise(function(success, error) {\n    self.exec(function(err, val) {\n      if (err) error(err);\n      else success(val);\n      self = success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n}\n\n/**\n * Returns a stream for the given find query.\n *\n * @throws Error if operation is not a find\n * @returns {Stream} Node 0.8 style\n */\n\nQuery.prototype.stream = function(streamOptions) {\n  if ('find' != this.op)\n    throw new Error('stream() is only available for find');\n\n  var conds = this._conditions;\n\n  var options = this._optionsForExec()\n  options.fields = this._fieldsForExec()\n\n  debug('stream', this._collection.collectionName, conds, options, streamOptions);\n\n  return this._collection.findStream(conds, options, streamOptions);\n}\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected () {\n  return !! (this._fields && Object.keys(this._fields).length > 0);\n}\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively () {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] &&\n        typeof this._fields[key] === 'object' &&\n        this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively () {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n}\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n}\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function () {\n  var options = utils.clone(this.options, { retainKeyOrder: true });\n  return options;\n}\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields, { retainKeyOrder: true });\n}\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function () {\n  var update = utils.clone(this._update, { retainKeyOrder: true })\n    , ops = utils.keys(update)\n    , i = ops.length\n    , ret = {}\n    , hasKeys\n    , val\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n}\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    var msg = method + '() must be used after where() '\n                     + 'when called with these arguments'\n    throw new Error(msg);\n  }\n}\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function (a, b) {\n  var denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n}\n\nQuery.prototype._validate = function (action) {\n  var fail;\n  var validator;\n\n  if (undefined === action) {\n\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n\n    fail = validator(this);\n\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n}\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n}\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n}\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env')\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = require('bluebird');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils\n"]},"metadata":{},"sourceType":"script"}