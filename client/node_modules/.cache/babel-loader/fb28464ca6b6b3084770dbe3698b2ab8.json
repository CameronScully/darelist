{"ast":null,"code":"\"use strict\";\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|\\-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([\\-\\+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|\\-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|\\-)?NaN$/i;\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34; // Nan value bits as 32 bit values (due to lack of longs)\n\nvar NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse(); // Infinity value bits 32 bit values (due to lack of longs)\n\nvar INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar EXPONENT_REGEX = /^([\\-\\+])?(\\d+)?$/; // Detect if the value is a digit\n\nvar isDigit = function (value) {\n  return !isNaN(parseInt(value, 10));\n}; // Divide two uint128 values\n\n\nvar divideu128 = function (value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n\n  var _rem = Long.fromNumber(0);\n\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return {\n      quotient: value,\n      rem: _rem\n    };\n  }\n\n  for (var i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32); // Add the divided to _rem\n\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return {\n    quotient: value,\n    rem: _rem\n  };\n}; // Multiply two Long values and return the 128 bit value\n\n\nvar multiply64x2 = function (left, right) {\n  if (!left && !right) {\n    return {\n      high: Long.fromNumber(0),\n      low: Long.fromNumber(0)\n    };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0)); // Return the 128 bit result\n\n  return {\n    high: productHigh,\n    low: productLow\n  };\n};\n\nvar lessThan = function (left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0; // Compare high bits first\n\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft == uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n};\n\nvar longtoHex = function (value) {\n  var buffer = new Buffer(8);\n  var index = 0; // Encode the low 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = value.low_ & 0xff;\n  buffer[index++] = value.low_ >> 8 & 0xff;\n  buffer[index++] = value.low_ >> 16 & 0xff;\n  buffer[index++] = value.low_ >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = value.high_ & 0xff;\n  buffer[index++] = value.high_ >> 8 & 0xff;\n  buffer[index++] = value.high_ >> 16 & 0xff;\n  buffer[index++] = value.high_ >> 24 & 0xff;\n  return buffer.reverse().toString('hex');\n};\n\nvar int32toHex = function (value) {\n  var buffer = new Buffer(4);\n  var index = 0; // Encode the low 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = value & 0xff;\n  buffer[index++] = value >> 8 & 0xff;\n  buffer[index++] = value >> 16 & 0xff;\n  buffer[index++] = value >> 24 & 0xff;\n  return buffer.reverse().toString('hex');\n};\n\nvar Decimal128 = function (bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\nDecimal128.fromString = function (string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false; // Total number of significant digits (no leading or trailing zero)\n\n  var significantDigits = 0; // Total number of significand digits read\n\n  var nDigitsRead = 0; // Total number of digits (no leading zeros)\n\n  var nDigits = 0; // The number of the digits after radix\n\n  var radixPosition = 0; // The index of the first non-zero in *str*\n\n  var firstNonZero = 0; // Digits Array\n\n  var digits = [0]; // The number of digits in digits\n\n  var nDigitsStored = 0; // Insertion pointer for digits\n\n  var digitsInsert = 0; // The index of the first non-zero digit\n\n  var firstDigit = 0; // The index of the last digit\n\n  var lastDigit = 0; // Exponent\n\n  var exponent = 0; // loop index over array\n\n  var i = 0; // The high 17 digits of the significand\n\n  var significandHigh = [0, 0]; // The low 17 digits of the significand\n\n  var significandLow = [0, 0]; // The biased exponent\n\n  var biasedExponent = 0; // Read index\n\n  var index = 0; // Trim the string\n\n  string = string.trim(); // Results\n\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP); // Validate the string\n\n  if (!stringMatch && !infMatch && !nanMatch || string.length == 0) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  } // Check if we have an illegal exponent format\n\n\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  } // Get the negative or positive sign\n\n\n  if (string[index] == '+' || string[index] == '-') {\n    isNegative = string[index++] == '-';\n  } // Check if user passed Infinity or NaN\n\n\n  if (!isDigit(string[index]) && string[index] != '.') {\n    if (string[index] == 'i' || string[index] == 'I') {\n      return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] == 'N') {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n  } // Read all the digits\n\n\n  while (isDigit(string[index]) || string[index] == '.') {\n    if (string[index] == '.') {\n      if (sawRadix) {\n        return new Decimal128(new Buffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] != '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true; // Only store 34 digits\n\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  } // Read exponent if exists\n\n\n  if (string[index] == 'e' || string[index] == 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX); // No digits read\n\n    if (!match || !match[2]) {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    } // Get exponent\n\n\n    exponent = parseInt(match[0], 10); // Adjust the index\n\n    index = index + match[0].length;\n  } // Return not a number\n\n\n  if (string[index]) {\n    return new Decimal128(new Buffer(NAN_BUFFER));\n  } // Done reading input\n  // Find first non-zero digit in digits\n\n\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent != 0 && significantDigits != 1) {\n      while (string[firstNonZero + significantDigits - 1] == '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  } // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n  // Overflow prevention\n\n\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  } // Attempt to normalize the exponent\n\n\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit == 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  } // Round\n  // We've normalized the exponent, but might still need to round.\n\n\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] != '0') {\n    var endOfString = nDigitsRead; // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n\n    if (sawRadix && exponent == EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit == 5) {\n        roundBit = digits[lastDigit] % 2 == 1;\n\n        for (var i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0; // overflowed most significant digit\n\n          if (dIdx == 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  } // Encode significand\n  // The high 17 digits of the significand\n\n\n  significandHigh = Long.fromNumber(0); // The low 17 digits of the significand\n\n  significandLow = Long.fromNumber(0); // read a zero\n\n  if (significantDigits == 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    var dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    var dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString(\"100000000000000000\"));\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  } // Biased exponent\n\n\n  var biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = {\n    low: Long.fromNumber(0),\n    high: Long.fromNumber(0)\n  }; // Encode combination, exponent, and significand.\n\n  if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber)) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low; // Encode sign\n\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  } // Encode into a buffer\n\n\n  var buffer = new Buffer(16);\n  var index = 0; // Encode the low 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = dec.low.low_ >> 8 & 0xff;\n  buffer[index++] = dec.low.low_ >> 16 & 0xff;\n  buffer[index++] = dec.low.low_ >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = dec.low.high_ >> 8 & 0xff;\n  buffer[index++] = dec.low.high_ >> 16 & 0xff;\n  buffer[index++] = dec.low.high_ >> 24 & 0xff; // Encode the high 64 bits of the decimal\n  // Encode low bits\n\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = dec.high.low_ >> 8 & 0xff;\n  buffer[index++] = dec.high.low_ >> 16 & 0xff;\n  buffer[index++] = dec.high.low_ >> 24 & 0xff; // Encode high bits\n\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = dec.high.high_ >> 8 & 0xff;\n  buffer[index++] = dec.high.high_ >> 16 & 0xff;\n  buffer[index++] = dec.high.high_ >> 24 & 0xff; // Return the new Decimal128\n\n  return new Decimal128(buffer);\n}; // Extract least significant 5 bits\n\n\nvar COMBINATION_MASK = 0x1f; // Extract least significant 14 bits\n\nvar EXPONENT_MASK = 0x3fff; // Value of combination field for Inf\n\nvar COMBINATION_INFINITY = 30; // Value of combination field for NaN\n\nvar COMBINATION_NAN = 31; // Value of combination field for NaN\n\nvar COMBINATION_SNAN = 32; // decimal128 exponent bias\n\nvar EXPONENT_BIAS = 6176;\n\nDecimal128.prototype.toString = function () {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n  // bits 0 - 31\n  var high; // bits 32 - 63\n\n  var midh; // bits 64 - 95\n\n  var midl; // bits 96 - 127\n\n  var low; // bits 1 - 5\n\n  var combination; // decoded biased exponent (14 bits)\n\n  var biased_exponent; // the number of significand digits\n\n  var significand_digits = 0; // the base-10 digits in the significand\n\n  var significand = new Array(36);\n\n  for (var i = 0; i < significand.length; i++) significand[i] = 0; // read pointer into significand\n\n\n  var index = 0; // unbiased exponent\n\n  var exponent; // the exponent if scientific notation is used\n\n  var scientific_exponent; // true if the number is zero\n\n  var is_zero = false; // the most signifcant significand bits (50-46)\n\n  var significand_msb; // temporary storage for significand decoding\n\n  var significand128 = {\n    parts: new Array(4)\n  }; // indexing variables\n\n  var i;\n  var j, k; // Output string\n\n  var string = []; // Unpack index\n\n  var index = 0; // Buffer reference\n\n  var buffer = this.bytes; // Unpack the low 64bits into a long\n\n  low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24; // Unpack the high 64bits into a long\n\n  midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24; // Unpack index\n\n  var index = 0; // Create the state of the decimal\n\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  } // Decode combination field and exponent\n\n\n  combination = high >> 26 & COMBINATION_MASK;\n\n  if (combination >> 3 == 3) {\n    // Check for 'special' values\n    if (combination == COMBINATION_INFINITY) {\n      return string.join('') + \"Infinity\";\n    } else if (combination == COMBINATION_NAN) {\n      return \"NaN\";\n    } else {\n      biased_exponent = high >> 15 & EXPONENT_MASK;\n      significand_msb = 0x08 + (high >> 14 & 0x01);\n    }\n  } else {\n    significand_msb = high >> 14 & 0x07;\n    biased_exponent = high >> 17 & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS; // Create string of significand digits\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (significand128.parts[0] == 0 && significand128.parts[1] == 0 && significand128.parts[2] == 0 && significand128.parts[3] == 0) {\n    is_zero = true;\n  } else {\n    for (var k = 3; k >= 0; k--) {\n      var least_digits = 0; // Peform the divide\n\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_; // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n\n      if (!least_digits) continue;\n\n      for (var j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10; // least_digits = Math.round(least_digits / 10);\n\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  } // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    var i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent; // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (var i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    } // Exponent\n\n\n    string.push('E');\n\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (var i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent; // non-zero digits before radix\n\n      if (radix_position > 0) {\n        for (var i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.'); // add leading zeros after radix\n\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function () {\n  return {\n    \"$numberDecimal\": this.toString()\n  };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"sources":["C:/Users/SATAN/darelist/client/node_modules/bson/lib/bson/decimal128.js"],"names":["Long","require","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","EXPONENT_MAX","EXPONENT_MIN","EXPONENT_BIAS","MAX_DIGITS","NAN_BUFFER","reverse","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","isDigit","value","isNaN","parseInt","divideu128","DIVISOR","fromNumber","_rem","i","parts","quotient","rem","shiftLeft","add","div","low_","modulo","multiply64x2","left","right","high","low","leftHigh","shiftRightUnsigned","leftLow","getLowBits","rightHigh","rightLow","productHigh","multiply","productMid","productMid2","productLow","lessThan","uhleft","high_","uhright","ulleft","ulright","longtoHex","buffer","Buffer","index","toString","int32toHex","Decimal128","bytes","_bsontype","fromString","string","isNegative","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","digits","nDigitsStored","digitsInsert","firstDigit","lastDigit","exponent","significandHigh","significandLow","biasedExponent","trim","stringMatch","match","infMatch","nanMatch","length","Error","undefined","substr","digitsString","join","endOfString","roundDigit","roundBit","dIdx","significand","dec","and","equals","or","COMBINATION_MASK","EXPONENT_MASK","COMBINATION_INFINITY","COMBINATION_NAN","COMBINATION_SNAN","prototype","midh","midl","combination","biased_exponent","significand_digits","Array","scientific_exponent","is_zero","significand_msb","significand128","j","k","ZERO","push","least_digits","result","Math","floor","radix_position","max","toJSON","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|\\-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([\\-\\+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|\\-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|\\-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\n\nvar EXPONENT_REGEX = /^([\\-\\+])?(\\d+)?$/;\n\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n}\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if(!value.parts[0] && !value.parts[1] &&\n     !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for(var i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n}\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if(!left && !right) {\n    return {high: Long.fromNumber(0), low: Long.fromNumber(0)};\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n                .add(productMid2)\n                .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return {high: productHigh, low: productLow};\n}\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if(uhleft < uhright) {\n    return true\n  } else if(uhleft == uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if(ulleft < ulright) return true;\n  }\n\n  return false;\n}\n\nvar longtoHex = function(value) {\n  var buffer = new Buffer(8);\n  var index = 0;\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = value.low_ & 0xff;\n  buffer[index++] = (value.low_ >> 8) & 0xff;\n  buffer[index++] = (value.low_ >> 16) & 0xff;\n  buffer[index++] = (value.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = value.high_ & 0xff;\n  buffer[index++] = (value.high_ >> 8) & 0xff;\n  buffer[index++] = (value.high_ >> 16) & 0xff;\n  buffer[index++] = (value.high_ >> 24) & 0xff;\n  return buffer.reverse().toString('hex');\n}\n\nvar int32toHex = function(value) {\n  var buffer = new Buffer(4);\n  var index = 0;\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return buffer.reverse().toString('hex');\n}\n\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n}\n\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if(!stringMatch\n    && ! infMatch\n    && ! nanMatch || string.length == 0) {\n      throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Check if we have an illegal exponent format\n  if(stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Get the negative or positive sign\n  if(string[index] == '+' || string[index] == '-') {\n    isNegative = string[index++] == '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if(!isDigit(string[index]) && string[index] != '.') {\n    if(string[index] == 'i' || string[index] == 'I') {\n      return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if(string[index] == 'N') {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while(isDigit(string[index]) || string[index] == '.') {\n    if(string[index] == '.') {\n      if(sawRadix) {\n        return new Decimal128(new Buffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if(nDigitsStored < 34) {\n      if(string[index] != '0' || foundNonZero) {\n        if(!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if(foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if(sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if(sawRadix && !nDigitsRead) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Read exponent if exists\n  if(string[index] == 'e' || string[index] == 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if(!match || !match[2]) {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if(string[index]) {\n    return new Decimal128(new Buffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if(!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if(exponent != 0 && significantDigits != 1) {\n      while(string[firstNonZero + significantDigits - 1] == '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if(exponent <= radixPosition && radixPosition - exponent > (1 << 14)) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while(exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if(lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if(digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while(exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if(lastDigit == 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if(nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if(exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if(digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER))\n      }\n    }\n  }\n\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if((lastDigit - firstDigit + 1 < significantDigits) && string[significantDigits] != '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if(sawRadix && exponent == EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if(roundDigit >= 5) {\n      roundBit = 1;\n\n      if(roundDigit == 5) {\n        roundBit = digits[lastDigit] % 2 == 1;\n\n        for(var i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if(parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if(roundBit) {\n      var dIdx = lastDigit;\n\n      for(; dIdx >= 0; dIdx--) {\n        if(++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if(dIdx == 0) {\n            if(exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER))\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if(significantDigits == 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if(lastDigit - firstDigit < 17) {\n    var dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for(; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    var dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for(; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for(; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString(\"100000000000000000\"));\n\n  significand.low = significand.low.add(significandLow);\n\n  if(lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  var biasedExponent = (exponent + EXPONENT_BIAS);\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if(significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber)) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if(isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = new Buffer(16);\n  var index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n}\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\nvar COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nvar EXPONENT_BIAS = 6176;\n\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for(var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = {parts: new Array(4)};\n  // indexing variables\n  var i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  var index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack the high 64bits into a long\n  midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack index\n  var index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high) };\n\n  if(dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if((combination >> 3) == 3) {\n    // Check for 'special' values\n    if(combination == COMBINATION_INFINITY) {\n      return string.join('') + \"Infinity\";\n    } else if(combination == COMBINATION_NAN) {\n      return \"NaN\";\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if(significand128.parts[0] == 0 && significand128.parts[1] == 0\n    && significand128.parts[2] == 0 && significand128.parts[3] == 0) {\n      is_zero = true;\n  } else {\n    for(var k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if(!least_digits) continue;\n\n      for(var j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if(is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    var i = 0;\n\n    while(!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if(scientific_exponent >= 34 || scientific_exponent <= -7 ||\n    exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if(significand_digits) {\n      string.push('.');\n    }\n\n    for(var i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if(scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if(exponent >= 0) {\n      for(var i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if(radix_position > 0) {\n        for(var i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while(radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for(var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n}\n\nDecimal128.prototype.toJSON = function() {\n  return { \"$numberDecimal\": this.toString() };\n}\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n"]},"metadata":{},"sourceType":"script"}